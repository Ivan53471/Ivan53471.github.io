<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/03/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>startup</category>
      </categories>
  </entry>
  <entry>
    <title>My First Post</title>
    <url>/2024/03/23/My-First-Post/</url>
    <content><![CDATA[<h2><span id="start-my-blogging-journey">Start My Blogging Journey</span></h2><p>This is my first post. Although it seems to be essential, I have never done this before.<br>I want to create my own blog, which can show my identity.</p>
<h2><span id="another-reason">Another Reason</span></h2><p>I am publishing this blog post as part of my assignment for the cloud computing course.<br>My name is 黄梓铭 and my ID number is 21311151.</p>
]]></content>
      <categories>
        <category>startup</category>
      </categories>
  </entry>
  <entry>
    <title>Go调用geth JSON RPC接口</title>
    <url>/2024/03/27/Go%E8%B0%83%E7%94%A8geth_JSON_RPC%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>在Go中调用以太坊的格式如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">client, _ := rpc.Dial(<span class="string">&quot;http://localhost:8545&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> result <span class="type">bool</span></span><br><span class="line">client.Call(&amp;result ,<span class="string">&quot;net_listening&quot;</span>) </span><br></pre></td></tr></table></figure>

<p>有以下常用接口</p>
<h2><span id="net">net</span></h2><p>1、net_version<br>当前连接网络的ID</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> networkid <span class="type">string</span></span><br><span class="line">client.Call(&amp;networkid,<span class="string">&quot;net_version&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2、net_listening<br>客户端是否处于监听状态</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> is_listing <span class="type">bool</span></span><br><span class="line">client.Call(&amp;is_listing,<span class="string">&quot;net_listening&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2><span id="eth">eth</span></h2><p>1、eth_accounts<br>返回账户地址数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> accounts []<span class="type">string</span></span><br><span class="line">client.Call(&amp;accounts,<span class="string">&quot;eth_accounts&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2、eth_getBalance<br>需要传入账户地址，返回余额，单位是<em>wei</em><br> “latest” 表示你要查询的是当前链上最新的账户余额</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> balance <span class="type">string</span></span><br><span class="line">client.Call(&amp;balance,<span class="string">&quot;eth_getBalance&quot;</span>,<span class="string">&quot;0x558c90c05d8c4b55a87de03bd601fd76faf50f9b&quot;</span>,<span class="string">&quot;latest&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>3、eth_coinbase<br>获取挖矿账户地址</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proto_version <span class="type">string</span></span><br><span class="line">client.Call(&amp;proto_version , <span class="string">&quot;eth_protocolVersion&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>4、eth_mining<br>返回客户端是否在挖矿</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> is_mining <span class="type">bool</span></span><br><span class="line">client.Call(&amp;is_mining,<span class="string">&quot;eth_mining&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>5、eth_getTransactionCount<br>返回指定地址发生的交易数量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> transactionCount <span class="type">string</span></span><br><span class="line">client.Call(&amp;transactionCount,<span class="string">&quot;eth_getBalance&quot;</span>,<span class="string">&quot;0x72w12d05d8c4b55a87de03bd601fd76faf50f9b&quot;</span>,<span class="string">&quot;latest&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>6、eth_blockNumber<br>获取当前块编号</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> blockNum <span class="type">string</span></span><br><span class="line">client.Call(&amp;blockNum ,<span class="string">&quot;eth_blockNumber&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2><span id="personal">personal</span></h2><p>1、personal_listAccounts<br>获取该节点下的所有账户</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> accounts []<span class="type">string</span></span><br><span class="line">client.Call(&amp;accounts,<span class="string">&quot;personal_listAccounts&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>2.personal_newAccount<br>创建用户，需要将密码作为参数传入</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newAccount <span class="type">string</span></span><br><span class="line">client.Call(&amp;newAccount, <span class="string">&quot;personal_newAccount&quot;</span>, <span class="string">&quot;12345678&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>3.personal_lockAccount<br>锁定指定账户，需要将地址作为参数传入</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> is_lock <span class="type">bool</span></span><br><span class="line">client.Call(&amp;is_lock, <span class="string">&quot;personal_lockAccount&quot;</span>, <span class="string">&quot;账户地址&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>4.personal_unlockAccount<br>解锁指定账户,有些操作必须解锁账户才可以操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> is_unlock <span class="type">bool</span></span><br><span class="line">client.Call(&amp;is_unlock, <span class="string">&quot;personal_lockAccount&quot;</span>, <span class="string">&quot;账户地址&quot;</span>,<span class="string">&quot;账户密码&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2><span id="db">db</span></h2><p>1.db_putString<br>在本地数据库中存入字符串</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> is_ok <span class="type">bool</span></span><br><span class="line">client.Call(&amp;is_ok, <span class="string">&quot;db_putString&quot;</span>, <span class="string">&quot;db_name&quot;</span>,<span class="string">&quot;key&quot;</span>,<span class="string">&quot;&quot;</span>value<span class="string">&quot;)</span></span><br></pre></td></tr></table></figure>

<p>2.db_getString<br>从本地数据库读取字符串</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> val <span class="type">string</span></span><br><span class="line">client.Call(&amp;val, <span class="string">&quot;db_getString&quot;</span>, <span class="string">&quot;db_name&quot;</span>,<span class="string">&quot;key&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>科研</category>
      </categories>
  </entry>
  <entry>
    <title>Linux系统构建以太坊私链</title>
    <url>/2024/03/26/%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/</url>
    <content><![CDATA[<h2><span id="配置go环境">配置Go环境</span></h2><p>1、首先切换到管理员身份<br><code>sudo -s</code></p>
<p>2、下载官⽅的 go 语⾔编译器压缩包<br><code>wget https://go.dev/dl/go1.21.3.linux-amd64.tar.gz</code></p>
<p>3、解压缩刚下载的新版本并放置到合适的位置<br><code>tar -C /usr/local -xzf go1.21.3.linux-amd64.tar.gz</code><br>（如果有旧版本，先输入 <code>rm -rf /usr/local/go</code> 移除）</p>
<p>4、设定环境变量<br><code>export PATH=$PATH:/usr/local/go/bin</code><br>试试看是否正常（应该会看到版本号）<br><code>go version</code></p>
<h2><span id="构建geth">构建geth</span></h2><p>1、下载git<br><code>sudo apt install git</code></p>
<p>2、克隆以太坊源码<br>这一步很可能连不上github，没什么解决方法，多试<br><code>git clone https://github.com/ethereum/go-ethereum.git</code></p>
<p>3、进入ethereum所在文件夹<br><code>cd go-ethereum</code></p>
<p>4、编译geth<br><code>make geth</code><br>如果发现下载很慢，可以终止掉，设置代理<br><code>export GOPROXY=https://goproxy.io,direct</code><br>下载完成，应该可以看到以下画面</p>
<p><img data-src="/pic/%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90.png"></p>
<p>5、进⼊⽬录<br><code>cd build/bin</code></p>
<p>6、启动主程序，连接主⽹并同步<br><code>./geth</code></p>
<h2><span id="搭建私链">搭建私链</span></h2><p>1、创造配置文件<br>在不同于以太坊源码的文件路径下创一个文件夹和.json文件，命名为genesis.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /project/MyChain</span><br><span class="line">vl /project/MyChain/genesis.json</span><br></pre></td></tr></table></figure>

<p>2、初始化链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd build/bin</span><br><span class="line">geth --datadir ../project/MyChain/ init ../project/MyChain/genesis.json</span><br></pre></td></tr></table></figure>

<p>3、启用链<br>此处启用私链，并且开启RPC接口<br><code>geth --datadir ../project/MyChain/ --identity &quot;fanone&quot; --rpc --rpcport 8545  --rpcapi &quot;db,eth,net,web3,personal&quot; --rpccorsdomain &quot;*&quot; --networkid 15</code><br>-–identity “fanone”：节点身份标识<br>-–rpc：开启 RPC 接口<br>–rpcport：指定端口<br>–rpcapi：开启的RPC API<br>–rpccorsdomain：跨域请求，”*”为允许所有来源的跨域请求<br>–networkid：网络标识符，用于连上私链，networkid是在genesis.json中确定的</p>
<!-- 在admin里面可以看到监听的端口号

personal.newAccount() 创建新用户
输入密码，返回值是账户地址

personal.unlockAccount(eth.accounts[0]) 
之后就可以输入密码，解锁账号

miner.start 开始挖矿

geth --datadir ../project/MyChain/ --networkid 15 console 2>output.log
2代表输出，>是重定向

geth --datadir ../project/MyChain/ --networkid 15 --rpc console 2>output.log

可以用开发者模式 -dev -->

]]></content>
      <categories>
        <category>科研</category>
      </categories>
  </entry>
  <entry>
    <title>综合实训调研</title>
    <url>/2024/03/28/%E7%BB%BC%E5%90%88%E5%AE%9E%E8%AE%AD%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>学习</category>
        <category>综合实训</category>
      </categories>
  </entry>
</search>
